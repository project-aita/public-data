{"instruction": "How many columns does my_table have?", "input": "my_table = [[1, 2], [3, 4]]", "output": "my_table has two columns."}
{"instruction": "Who is logged into snowflake right now?", "input": "", "output": "[{'username': 'jane', 'age': 30, 'location': 'New York City'}, {'username': 'john', 'age': 40, 'location': 'San Francisco'}]"}
{"instruction": "What is the difference between a schema and a database in snowflake?", "input": "", "output": "A schema is a logical structure of tables, columns and relationships. It defines the data model for an application. A database is a collection of schemas that are stored on disk."}
{"instruction": "Describe all users in snowflake?", "input": "", "output": "snowflake has two users, Alice and Bob.\nAlice is a programmer who likes to read books about programming. She also likes to play tennis.\nBob is a programmer who likes to read books about programming. He also likes to play tennis."}
{"instruction": "List tables in schemas in snowflake?", "input": "", "output": "List of tables in the schema \"snowflake\":\nTable \"public.customer\"\nTable \"public.order\"\nTable \"public.product\"\nTable \"public.user\""}
{"instruction": "Select from snowflake table?", "input": "[2, 4, 6]", "output": "4"}
{"instruction": "Select from snowflake table?", "input": "[1, 2, 3]", "output": "2"}
{"instruction": "Describe the table in oracle database?", "input": "", "output": "CREATE TABLE table_name ( column1 datatype, column2 datatype, ...)"}
{"instruction": "Connect to oracle database?", "input": "", "output": "import oracle.jdbc.*;\npublic class Oracle {"}
{"instruction": "How do i create a user?", "input": "", "output": "class User(object):\n    def __init__(self, name, email, password):\n    self.name = name"}
{"instruction": "What is the current schema?", "input": "{ \"name\": \"John\", \"age\": 25, \"address\": { \"street\": \"Main Street\", \"city\": \"New York\" } }", "output": "Schema: { \"name\": \"John\", \"age\": 25, \"address\": { \"street\": \"Main Street\", \"city\": \"New York\" } }"}
{"instruction": "What roles are available?", "input": "", "output": "- Developer\n- Designer\n- Tester"}
{"instruction": "How do i assign a role to a user?", "input": "", "output": "class User(object):\n    def __init__(self, name, role):\n    self.name = name"}
{"instruction": "Describe column in database?", "input": "", "output": "A column is a field in a database table. It contains data of the same type, such as an integer or string. A column can be defined to have a unique value (a primary key) or multiple values (a multi-value)."}
{"instruction": "What are the tables i have in database?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`user_id` int(11) DEFAULT NULL,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`),\nKEY `fk_user_id` (`user_id`),\nCONSTRAINT `fk_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Create table in database?", "input": "", "output": "CREATE TABLE IF NOT EXISTS `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "How do i connect to database?", "input": "", "output": "import sqlite3\nconn = sqlite3.connect('mydb')"}
{"instruction": "Delete a schema from snowflake?", "input": "", "output": "DELETE FROM schema_name"}
{"instruction": "Drop an index from snowflake?", "input": "snowflake = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"instruction": "What is the primary key for a table in snowflake?", "input": "", "output": "Primary key is a column or combination of columns that uniquely identifies each row in a table."}
{"instruction": "Describe the column of a table in snowflake?", "input": "", "output": "The column of a table in snowflake is the number of rows that are present in each level. For example, if there are 3 levels and the first level has 2 rows, then the second level will have 4 rows and the third level will have 8 rows."}
{"instruction": "Select from multiple tables in snowflake?", "input": "- Table1: Name, Age, Gender\n- Table2: Name, Address, Phone", "output": "- Name, Age, Gender, Address, Phone"}
{"instruction": "What are the columns in a table?", "input": "", "output": "Columns are the vertical divisions of a table."}
{"instruction": "How many rows do i have in snowflake?", "input": "", "output": "def snowflake(n):\n    if n == 0:\n    return 1\n    else:\n    return snowflake(n-1) + 1"}
{"instruction": "Create a new user for mysql database", "input": "", "output": "CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON *.* TO 'newuser'@'localhost';\nFLUSH PRIVILEGES;"}
{"instruction": "Drop schema with name 'snowflake' from dbname", "input": "", "output": "DROP SCHEMA snowflake FROM dbname;"}
{"instruction": "Drop the table from oracle database?", "input": "", "output": "DROP TABLE [table_name]"}
{"instruction": "What is my password for connecting to oracle database?", "input": "", "output": "import sqlite3\nconn = sqlite3.connect('/home/user/test.db')\nprint(conn.execute(\"SELECT password FROM users WHERE username='admin'\"))"}
{"instruction": "How many rows are there in a table?", "input": "Table:\nRow 1: Name, Age, Gender\nRow 2: Height, Weight, Eye Color\nRow 3: Favorite Color, Favorite Food, Favorite Animal", "output": "3"}
{"instruction": "How can i find out if a table exists?", "input": "", "output": "def tableExists(tableName):\n    if os.path.exists(tableName):\n    return True"}
{"instruction": "Create table my_table (column1 integer, column2 varchar(50), column3 date)?", "input": "", "output": "CREATE TABLE my_table ( column1 integer, column2 varchar(50), column3 date );"}
{"instruction": "Insert into my_table values ('a', 'b', now())?", "input": "", "output": "INSERT INTO my_table VALUES ('a', 'b', CURRENT_TIMESTAMP)"}
{"instruction": "What is the size of my_table?", "input": "my_table = [1, 2, 3]", "output": "3"}
{"instruction": "What is the size of my_table?", "input": "my_table = {'a': 1, 'b': 2}", "output": "2"}
{"instruction": "Show grants for my_table", "input": "", "output": "grants for my_table"}
{"instruction": "Create a table called my_table in mysql", "input": "", "output": "CREATE TABLE `my_table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "What are the tables in this schema?", "input": "CREATE TABLE users (\nid SERIAL PRIMARY KEY,\nname TEXT NOT NULL,\nage INT NOT NULL,\ngender ENUM('M', 'F') NOT NULL,\ncreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\nupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\nPRIMARY KEY (id)\n);", "output": "Users table has id, name, age, gender and created_at columns. Users table also has a primary key named id."}
{"instruction": "What is the current date and time in my local system?", "input": "", "output": "Current date and time in my local system is 2018-08-15T10:00:00+02:00."}
{"instruction": "Get the last_insert_id for table in snowflake?", "input": "", "output": "CREATE TABLE `snowflake`.`user_table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nINSERT INTO `snowflake`.`user_table` VALUES (1,'John');\nINSERT INTO `snowflake`.`user_table` VALUES (2,'Jane');\nINSERT INTO `snowflake`.`user_table` VALUES (3,'Tom');\nSELECT * FROM `snowflake`.`user_table` ORDER BY `last_insert_id` DESC LIMIT 1;"}
{"instruction": "What is the version of snowflake?", "input": "", "output": "def snowflake():\n    return \"v1.0\""}
{"instruction": "What columns are in column def?", "input": "Column def: name, age, gender, address", "output": "Column def"}
{"instruction": "List all views for user xyz?", "input": "", "output": "- xyz/profile\n- xyz/settings\n- xyz/logout"}
{"instruction": "Is user xyz connected to snowflake?", "input": "User xyz is not connected to snowflake.", "output": "No"}
{"instruction": "Is user xyz connected to snowflake?", "input": "User xyz is connected to snowflake.", "output": "Yes"}
{"instruction": "Connect as user xyz?", "input": "", "output": "Connected as user xyz."}
{"instruction": "List the tables in a database?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `tags` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`tag` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `comments` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`post_id` int(11) NOT NULL,\n`comment` text,\nPRIMARY KEY (`id`),\nKEY `post_id` (`post_id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "List all columns for table 'snowflake'?", "input": "", "output": "CREATE TABLE snowflake ("}
{"instruction": "Create a new column on snowflake table?", "input": "", "output": "CREATE COLUMN ON snowflake(name, age) AS (SELECT name, age FROM snowflake WHERE age > 0);"}
{"instruction": "What is the name of the current user?", "input": "", "output": "import os\nos.getuid()"}
{"instruction": "How do i backup my data in snowflake?", "input": "", "output": "snowflake backup --db-name my_db --table-name my_table --file-path /home/user/my_backup.csv"}
{"instruction": "How do i backup my data in snowflake?", "input": "", "output": "snowflake backup --db-name my_db --table-name my_table --file-path /home/user/my_backup.sql"}
{"instruction": "How do i backup my data in snowflake?", "input": "", "output": "You can use the following command to backup your data in snowflake.\nsnowflake backup --db-name [database name] --table-name [table name] --file-path [backup file path]"}
{"instruction": "Restore from a backup of snowflake?", "input": "", "output": "def restore(backup):\n    backup.restore()"}
{"instruction": "Get hostname, ip address for localhost?", "input": "", "output": "localhost"}
{"instruction": "How do i get a list of all the columns in a table?", "input": "", "output": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name'"}
{"instruction": "Show all tables in a database?", "input": "", "output": "SELECT * FROM INFORMATION_SCHEMA.TABLES;"}
{"instruction": "Create an index on column(s) ?", "input": "", "output": "CREATE UNIQUE INDEX ON table(column);"}
{"instruction": "Create an index on column(s) ?", "input": "", "output": "CREATE INDEX ON table(column);"}
{"instruction": "Create a new table with same schema as snowflake table 'my_table'?", "input": "", "output": "CREATE TABLE `my_table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;"}
{"instruction": "Drop table my_table from db_name?", "input": "", "output": "DROP TABLE my_table;"}
{"instruction": "Select from table in oracle?", "input": "Table:\nName | Age | Gender\nJohn | 25 | Male\nJane | 22 | Female", "output": "John"}
{"instruction": "Select from table in oracle?", "input": "Table:\nName | Age | Gender\nJohn | 25 | Male\nJane | 22 | Female\nMary | 20 | Female", "output": "Jane"}
{"instruction": "Grant select on warehouse to user1?", "input": "", "output": "GRANT SELECT ON warehouse TO user1;"}
{"instruction": "Describe column_name of table_name?", "input": "Table: users\nColumn: email", "output": "The column name is email."}
{"instruction": "Describe column_name of table_name?", "input": "Table: users\nColumn: id", "output": "The column name is id."}
{"instruction": "Drop view myview from database mydb?", "input": "", "output": "DROP VIEW myview FROM DATABASE mydb;"}
{"instruction": "Show grants for user1?", "input": "", "output": "grants for user1:\n- grantee: user1, resource: project1, start_date: 2017-01-01T00:00:00Z, end_date: 2018-01-01T00:00:00Z, amount: 100000.0"}
{"instruction": "Describe schema of user1?", "input": "", "output": "user1 has the following attributes:\n- name\n- age\n- gender\n- address\n- email\n- phone_number"}
{"instruction": "Create an index on column xyz in table abc in snowflake?", "input": "", "output": "CREATE INDEX abc_xyz ON abc (xyz);"}
{"instruction": "Alter table abc add constraint fk_xyz foreign key (x) references dba.abc(y)?", "input": "", "output": "alter table abc add constraint fk_xyz foreign key (x) references dba.abc(y);"}
{"instruction": "Drop schema if exists dba from snowflake?", "input": "", "output": "DROP SCHEMA IF EXISTS dba;"}
{"instruction": "Alter table abc set default for col1 to 12345?", "input": "", "output": "ALTER TABLE abc SET DEFAULT 12345 FOR col1;"}
{"instruction": "Create a new user called 'newuser' with password 'mypass'?", "input": "", "output": "import os\nos.system('echo \"useradd newuser -p mypass\" | sudo tee /etc/adduser.conf')"}
{"instruction": "Create a view from the following query: select * from my_table where id = 5;", "input": "", "output": "id | name \n5 | John Doe"}
{"instruction": "Alter table my_table add column name varchar(20) null?", "input": "", "output": "ALTER TABLE my_table ADD COLUMN name varchar(20) NULL;"}
{"instruction": "Insert into my_table values (1,2,3);", "input": "", "output": "INSERT INTO my_table VALUES (1,2,3);"}
{"instruction": "Update my_table set col=col+1;", "input": "", "output": "UPDATE my_table SET col=col+1;"}
{"instruction": "Show grants on a user?", "input": "", "output": "class User(object):\n    def __init__(self, name, email, password, grants):\n    self.name = name"}
{"instruction": "Describe the grantee for a specific privilege?", "input": "", "output": "The grantee is the entity that has been granted a privilege."}
{"instruction": "Show the users that have been granted a particular privilege?", "input": "Users: John, Mary, and Jane have been granted the \"Admin\" privilege.", "output": "True"}
{"instruction": "How to find out which privileges are granted to a role?", "input": "", "output": "def findPrivileges(role):\n    privileges = []\n    for privilege in role.privileges:\n        privileges.append(privilege)\n    return privileges"}
{"instruction": "List all tables in mysql?", "input": "", "output": "show tables;"}
{"instruction": "What are the privileges on table x?", "input": "", "output": "select, insert, update, delete"}
{"instruction": "Describe the columns of the table y?", "input": "", "output": "y = x^2 + 2x - 1"}
{"instruction": "How much space does this table take up?", "input": "", "output": "Table: [1, 2, 3, 4, 5]\nSpace used: 1 + 2 + 3 + 4 + 5 = 12 bytes."}
{"instruction": "Show all indexes of the database testdb?", "input": "", "output": "testdb=> SHOW INDEX FROM testdb;\n+-------+-------------+----------+-------------------+----------------------+---------+------+-------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |\n+-------+-------------+----------+-------------------+----------------------+---------+------+-------------+\n| testdb.a | 0 | PRIMARY | 1 | idx_a_id | A | NULL | NULL | NULL | | BTREE | | | testdb.b | 0 | idx_b_id | 1 | idx_b_id | B | NULL | NULL | NULL | | BTREE | | | testdb.c | 0 | idx_c_id | 2 | idx_c_id | C | NULL | NULL | NULL | | BTREE | | | testdb.d | 0 | idx_d_id | 3 | idx_d_id | D | NULL | NULL | NULL | | BTREE | | +-------+-------------+----------+-------------------+----------------------+---------+------+-------------+"}
{"instruction": "Drop an index with name starting with 'a' from testdb?", "input": "", "output": "DROP INDEX IF EXISTS testdb.a_idx;"}
{"instruction": "Delete all data in snowflake table named \"testtable\"?", "input": "", "output": "DELETE FROM snowflake.testtable;"}
{"instruction": "Show all tables and their schemas in the current database?", "input": "", "output": "mysql> show tables;\n+------------------+-------------+----------+--------------+---------+-----------------------+\n| Tables_in_test | test | information_schema | NULL | NULL | NULL |\n+------------------+-------------+----------+--------------+---------+-----------------------+\n1 row in set (0.00 sec)"}
{"instruction": "Show all tables and their schemas in the current database?", "input": "", "output": "show tables;"}
{"instruction": "Show schema for table t1 in db d1?", "input": "", "output": "CREATE TABLE t1 (\nid int(11) NOT NULL AUTO_INCREMENT,\nname varchar(255) DEFAULT NULL,\nPRIMARY KEY (id),\nUNIQUE INDEX name (name));"}
{"instruction": "List all users and their privileges?", "input": "", "output": "[{'name': 'John', 'privileges': ['create', 'update']}, {'name': 'Jane', 'privileges': ['read']}]"}
{"instruction": "List tables, columns, views and functions that begin with a certain letter?", "input": "", "output": "tables: t1, t2, t3, ...\ncolumns: c1, c2, c3, ...\nviews: v1, v2, v3, ...\nfunctions: f1, f2, f3, ..."}
{"instruction": "Create table t1 (col1 int, col2 varchar(20))", "input": "", "output": "CREATE TABLE t1 (col1 int, col2 varchar(20))"}
{"instruction": "Select * from my_table where id = 1", "input": "", "output": "*"}
{"instruction": "Drop the warehouse in snowflake?", "input": "", "output": "def drop(n, k):\n    if n == 0:\n    return True\n    else:\n    return False"}
{"instruction": "Drop the user from the database?", "input": "", "output": "def dropUser(self):\n    self.db.drop_user(self.username)"}
{"instruction": "Describe column \"id\" from table \"testtable\"?", "input": "", "output": "id - integer, primary key"}
{"instruction": "Show all columns for the view \"vw_testview\" in schema \"snowflake\"?", "input": "", "output": "Columns for view \"vw_testview\" in schema \"snowflake\":\nColumn name Data type Access privileges"}
{"instruction": "What is the current time zone of this server?", "input": "", "output": "UTC+00:00"}
{"instruction": "How many tables are there in the testdatabase?", "input": "", "output": "SELECT COUNT(*) FROM `testdatabase`;"}
{"instruction": "Show me your hostname?", "input": "", "output": "$ hostname"}
{"instruction": "What tables are in the schema i have?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)\n);\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`user_id` int(11) DEFAULT NULL,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\n`created_at` datetime DEFAULT NULL,\n`updated_at` datetime DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `user_id` (`user_id`),\nCONSTRAINT `fk_posts_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE\n);"}
{"instruction": "Drop view vw_myview in snowflake?", "input": "", "output": "DROP VIEW vw_myview;"}
{"instruction": "What is the average size of a warehouse?", "input": "", "output": "def averageSize(numbers):\n    total = 0\n    for i in range(len(numbers)):\n        total += numbers[i]\n    return total / len(numbers)"}
{"instruction": "How many warehouses are there in snowflake?", "input": "", "output": "There are 5 warehouses in snowflake."}
{"instruction": "Create an index on warehouseid and name", "input": "warehouseid, name", "output": "{'warehouse1': ['product1', 'product2']}"}
{"instruction": "Describe table of schema?", "input": "", "output": "Table of schema is a table which contains the details about the database. It includes the name of the columns, their data types and other information like primary key, foreign key etc."}
{"instruction": "Show current users in snowflake?", "input": "", "output": "class Solution(object):\n    def showCurrentUsers(self):\n    return self.db.query(\"SELECT * FROM users ORDER BY id ASC\")"}
{"instruction": "Show databases on this host?", "input": "Command: show databases;", "output": "(a)"}
{"instruction": "Show databases on this host?", "input": "Command: show dbs;", "output": "(c)"}
{"instruction": "Show databases on this host?", "input": "Command: show databasename;", "output": "(d)"}
{"instruction": "Show databases on this host?", "input": "Command: show database;", "output": "(b)"}
{"instruction": "Show all privileges granted to any role?", "input": "", "output": "SELECT * FROM role_privileges WHERE role_id = 1;"}
{"instruction": "What are the privileges for this role?", "input": "Privileges: view, edit, and delete.", "output": "View"}
{"instruction": "Show all columns from a particular table?", "input": "Table: users\nColumns: id, name, age, email, address", "output": "id, name, age, email, address"}
{"instruction": "Show all columns from a particular table?", "input": "Table: products\nColumns: id, name, price, quantity_available", "output": "id, name, price, quantity_available"}
{"instruction": "Drop table if exists my_table from snowflake?", "input": "", "output": "DROP TABLE IF EXISTS my_table;"}
{"instruction": "Create table if not exists my_table (my_col1, my_col2) in snowflake?", "input": "", "output": "CREATE TABLE my_table (my_col1 INT, my_col2 INT);"}
{"instruction": "Insert into my_table values (?, ?) in snowflake?", "input": "Table: my_table", "output": "INSERT INTO my_table VALUES (?, ?)\nINSERT INTO my_table VALUES (1, 2)\nINSERT INTO my_table VALUES (2, 3)\nINSERT INTO my_table VALUES (3, 4)\nINSERT INTO my_table VALUES (4, 5)\nINSERT INTO my_table VALUES (5, 6)\nINSERT INTO my_table VALUES (6, 7)\nINSERT INTO my_table VALUES (7, 8)\nINSERT INTO my_table VALUES (8, 9)\nINSERT INTO my_table VALUES (9, 10)"}
{"instruction": "Select * from my_table where col = ? in snowflake?", "input": "", "output": "*"}
{"instruction": "Describe user(name,password) in my system?", "input": "", "output": "user(name,password) is a record that contains name and password of the user. It also has a method called login() which takes username and password as input and returns True if login was successful or False otherwise."}
{"instruction": "Create table with a primary key and not nullable column?", "input": "", "output": "CREATE TABLE `table_name` (\n`id` int(11) NOT NULL,\nPRIMARY KEY (`id`)\n);"}
{"instruction": "Alter table to add an index on (column, column)?", "input": "Table: [1, 2, 3, 4, 5]", "output": "[1, 2, 3, 4, 5], [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]"}
{"instruction": "Describe the schema of my_table?", "input": "", "output": "CREATE TABLE my_table (\nid INT NOT NULL PRIMARY KEY,\nname VARCHAR(100) NOT NULL,\nage INT NOT NULL,\ncity VARCHAR(50) NOT NULL,\ncountry VARCHAR(50) NOT NULL,\nPRIMARY KEY (id));"}
{"instruction": "Show tables where id = 1", "input": "Table: users, id, name, email", "output": "Table: users, id, name, email\nid | name | email \n1 | John Doe | john.doe@example.com"}
{"instruction": "Show databases where name = 'snowflake'", "input": "", "output": "snowflake@localhost:3306/snowflake\nsnowflake@localhost:3306/snowflake_test"}
{"instruction": "What is the datatype of column xyz?", "input": "1234567890123456", "output": "int64"}
{"instruction": "What is the datatype of column xyz?", "input": "xyz", "output": "string"}
{"instruction": "What are my roles in snowflake schema?", "input": "", "output": "You are the owner of the schema. You have full control over it and can change anything you want in it."}
{"instruction": "List all indexes on my_table", "input": "Table: my_table = [1, 2, 3, 4, 5]", "output": "0, 1, 2, 3, 4, 5"}
{"instruction": "List all indexes on my_table", "input": "Table: my_table = [1, 2, 3, 4]", "output": "0, 1, 2, 3, 4"}
{"instruction": "Create an index on my_table(column1, column2)", "input": "Table: my_table(column1, column2)", "output": "CREATE INDEX index_my_table_on_column1_and_column2 ON my_table (column1, column2);"}
{"instruction": "What is the difference between insert and update?", "input": "", "output": "Insert adds a new element to the list, while update changes an existing element in the list."}
{"instruction": "How to delete a table in snowflake?", "input": "", "output": "DELETE FROM table_name WHERE column_name = value;"}
{"instruction": "How do i create a new column in table x?", "input": "", "output": "CREATE TABLE x (a INT, b INT);\nINSERT INTO x VALUES (1, 2), (3, 4);\nALTER TABLE x ADD COLUMN c INT;\nSELECT * FROM x;"}
{"instruction": "Create index on column1 of table my_table?", "input": "", "output": "CREATE INDEX my_table_idx ON my_table(column1);"}
{"instruction": "Select * from warehouse where id=2?", "input": "", "output": "*"}
{"instruction": "Which tables are owned by me?", "input": "", "output": "- table1\n- table2"}
{"instruction": "What is the largest value in column col1?", "input": "Column: col1\nValue: 10", "output": "col1"}
{"instruction": "What is the largest value in column col1?", "input": "Column: col2\nValue: 20", "output": "col2"}
{"instruction": "What is the largest value in column col1?", "input": "Column: col3\nValue: 30", "output": "col3"}
{"instruction": "Create a user with password xxx and grant select on schema yyy to that user?", "input": "", "output": "CREATE USER 'xxx'@'localhost' IDENTIFIED BY 'xxx';\nGRANT SELECT ON SCHEMA 'yyy' TO 'xxx';"}
{"instruction": "What is the minimum size of a column in snowflake?", "input": "", "output": "The minimum size of a column in snowflake is 2."}
{"instruction": "What are the indexes available in snowflake?", "input": "", "output": "snowflake.indexes() -> ['primary', 'secondary']"}
{"instruction": "How do i backup/restore from/to s3 using snowflake?", "input": "", "output": "import boto3\nsnowflake = boto3.client('snowflake')\nrestore_bucket = snowflake.create_bucket(bucket='my-backup-bucket')\nrestore_item = restore_bucket.objects.get(key='my-file.csv')\nrestore_item.download_file('/tmp/my-file.csv')"}
{"instruction": "Create a stored procedure?", "input": "", "output": "CREATE PROCEDURE [dbo].[GetEmployeeDetails]\nAS\nBEGIN\nEND"}
{"instruction": "Describe column1 in my_table?", "input": "", "output": "Column1 is a string column. It contains the names of the columns in my_table."}
{"instruction": "Explain the contents of my_table?", "input": "", "output": "my_table = {'name': 'John', 'age': 25, 'city': 'New York'}"}
{"instruction": "Alter table my_table add constraint ck primary key(col1) using uniqueidentifier?", "input": "", "output": "alter table my_table add constraint ck primary key(col1) using uniqueidentifier"}
{"instruction": "Alter table my_table add constraint fk foreign key(fkcolumn) references another_table?", "input": "Table: another_table\nColumns: id, name, age", "output": "ALTER TABLE another_table ADD CONSTRAINT fk FOREIGN KEY (fkcolumn) REFERENCES my_table(id);"}
{"instruction": "Alter table my_table add constraint fk foreign key(fkcolumn) references another_table?", "input": "Table: my_table\nColumns: id, name, age", "output": "ALTER TABLE my_table ADD CONSTRAINT fk FOREIGN KEY (fkcolumn) REFERENCES another_table(id);"}
{"instruction": "Drop a table from a schema in snowflake?", "input": "", "output": "DROP TABLE IF EXISTS [schema].[table_name];"}
{"instruction": "Create a new user with password \"test\" in snowflake?", "input": "", "output": "CREATE USER test WITH PASSWORD 'test';"}
{"instruction": "Connect to mysql as user test?", "input": "", "output": "import mysql.connector\nmysql_connector = mysql.connector.connect(user='test', password='test')"}
{"instruction": "Update the column col1 of table tbl1 set value=100 where id = 1?", "input": "Table: tbl1\nColumns: id, col1", "output": "UPDATE tbl1 SET col1 = 100 WHERE id = 1"}
{"instruction": "Update the column col1 of table tbl1 set value=100 where id = 1?", "input": "Table: tbl2\nColumns: id, col1, col2", "output": "UPDATE tbl2 SET col1 = col2 + 10 WHERE id = 1"}
{"instruction": "How much space is used by the testtable?", "input": "", "output": "def testtable():\n    print('testtable')\n    return 0"}
{"instruction": "What indexes do i have on the testtable?", "input": "", "output": "testtable.idx_name, testtable.idx_score, testtable.idx_age, testtable.idx_gender, testtable.idx_address, testtable.idx_city, testtable.idx_state, testtable.idx_zipcode, testtable.idx_country"}
{"instruction": "Create index on testtable (name,age)?", "input": "", "output": "CREATE INDEX testtable_name_age ON testtable (name, age);"}
{"instruction": "Delete all indexes from testtable?", "input": "", "output": "DELETE FROM testtable WHERE id IN (1, 2, 3);"}
{"instruction": "Alter table testtable add age int(4) default 0;", "input": "", "output": "ALTER TABLE testtable ADD age int(4) default 0;"}
{"instruction": "List all users and roles in the database?", "input": "", "output": "SELECT * FROM users;\nSELECT * FROM roles;"}
{"instruction": "Which privileges granted to a user?", "input": "", "output": "- read\n- write"}
{"instruction": "Create table abc (x int, y varchar(20)) engine=innodb;", "input": "", "output": "CREATE TABLE `abc` (\n`x` int(11) DEFAULT NULL,\n`y` varchar(20) DEFAULT NULL\nENGINE=InnoDB\n) ENGINE=InnoDB;"}
{"instruction": "Insert into abc values (1,'one');", "input": "", "output": "abc = [1, 'one']"}
{"instruction": "Select * from abc;", "input": "", "output": "*"}
{"instruction": "What are the columns of table snowflake_db1.employee?", "input": "", "output": "id, name, age, salary, department_id, manager_id"}
{"instruction": "List column details for each column in employee table?", "input": "", "output": "Column Name | Type | Null | Key | Default | Extra\nName | varchar(50) | NO | PRI | NULL | |\nAge | int(11) | YES | MUL | NULL | |\nSalary | decimal(10,2) | YES | MUL | NULL | |\nBonus | decimal(10,2) | YES | MUL | NULL | |"}
{"instruction": "Create an index on the name column in the employee table?", "input": "", "output": "CREATE INDEX ON employee(name);"}
{"instruction": "Drop an index from the employee table?", "input": "Employee(name, age, salary)", "output": "Employee(name, age)"}
{"instruction": "Show data from a view in snowflake?", "input": "", "output": "CREATE OR REPLACE VIEW v_test AS SELECT * FROM (SELECT 'a' as a, 1 as b) t(a, b);"}
{"instruction": "Grant access to a user for the entire database in snowflake?", "input": "", "output": "CREATE ROLE [user_name] WITH LOGIN;\nGRANT ALL ON DATABASE [database_name] TO [user_name];"}
{"instruction": "Grant select on a table to role?", "input": "", "output": "GRANT SELECT ON table_name TO role_name"}
{"instruction": "Describe all tables in schema?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)\n);\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\n`user_id` int(11) DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `user_id` (`user_id`),\nCONSTRAINT `fk_posts_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE\n);"}
{"instruction": "Insert new row into mysql table?", "input": "", "output": "INSERT INTO `table` (`id`, `name`) VALUES (NULL, 'new row');"}
{"instruction": "Drop database from mysql?", "input": "", "output": "DROP DATABASE IF EXISTS `database_name`;"}
{"instruction": "Insert rows to mysql table?", "input": "", "output": "INSERT INTO `table` (`id`, `name`) VALUES (NULL, 'John Doe'), (NULL, 'Jane Doe');"}
{"instruction": "Delete rows from mysql table?", "input": "", "output": "DELETE FROM table_name WHERE column_name = 'value'"}
{"instruction": "Connect to another database on the same server?", "input": "", "output": "import psycopg2\nconn = psycopg2.connect(database='dbname', user='user', password='password')"}
{"instruction": "How do i list databases on the same server?", "input": "", "output": "use master;\nselect name from sys.databases;"}
{"instruction": "Backup all databases on the same server?", "input": "", "output": "import os\nimport shutil\ndef backup(db_list):\n    for db in db_list:\n        if not os.path.exists(db):\n        continue\n    shutil.copyfile(db, './backup/' + db)"}
{"instruction": "How do i delete an index?", "input": "", "output": "class Solution(object):\n    def deleteIndex(self, index):\n    if self.data[index] != 0:\n    self.data[index] = 0\n    return True\n    else:\n    return False"}
{"instruction": "Create table my_table (col1 varchar2(50), col2 number)?", "input": "", "output": "CREATE TABLE my_table (col1 varchar2(50), col2 number);"}
{"instruction": "Create view my_view as select * from my_table where col1 = 'abc'?", "input": "", "output": "CREATE VIEW my_view AS SELECT * FROM my_table WHERE col1 = 'abc'"}
{"instruction": "Alter table my_table add column new_column datatype varchar2(100) not null;", "input": "", "output": "alter table my_table add column new_column datatype varchar2(100) not null;"}
{"instruction": "Describe a column in snowflake?", "input": "", "output": "Snowflake is a star schema."}
{"instruction": "Drop a role from snowflake?", "input": "", "output": "class Solution(object):\n    def dropRole(self, role):\n    for r in self.roles():\n    if r == role:\n    self.roles.remove(r)\n    return True"}
{"instruction": "Drop all tables in the database ?", "input": "", "output": "DROP TABLE IF EXISTS `users`;\nDROP TABLE IF EXISTS `posts`;\nDROP TABLE IF EXISTS `comments`;\nDROP TABLE IF EXISTS `tags`;\nDROP TABLE IF EXISTS `categories`;\nDROP TABLE IF EXISTS `links`;\nDROP TABLE IF EXISTS `settings`;"}
{"instruction": "Create a trigger on table x in db y to execute z after insert/update?", "input": "", "output": "CREATE TRIGGER [x_trigger] ON [y].[x] FOR INSERT, UPDATE AS\nBEGIN\nEND;"}
{"instruction": "Grant select, update and delete privileges on a view vwxyz in db abc?", "input": "", "output": "GRANT SELECT, UPDATE, DELETE ON vwxyz TO [user]@'localhost';"}
{"instruction": "Grant select, insert, update and delete privileges on all views in the schema testuser?", "input": "", "output": "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL VIEWS IN SCHEMA testuser TO 'testuser'@'localhost';"}
{"instruction": "List all users with role admin in the current database?", "input": "", "output": "SELECT * FROM users WHERE role = 'admin';"}
{"instruction": "Update a column with a value in snowflake?", "input": "[1, 2, 3]", "output": "[1, 2, 3, 4]"}
{"instruction": "List all the tables and their columns from a database?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`user_id` int(11) DEFAULT NULL,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`),\nKEY `fk_user_id` (`user_id`),\nCONSTRAINT `fk_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "List users that have access to the database?", "input": "List of users: John, Mary, Bill, Jane", "output": "(b)"}
{"instruction": "List users that have access to the database?", "input": "List of users: John, Mary, Bill", "output": "(a)"}
{"instruction": "List users that have access to the database?", "input": "List of users: John, Mary, Bill, Jane, Joe", "output": "(c)"}
{"instruction": "Create table test(id integer, name varchar(30)) in mydb?", "input": "", "output": "CREATE TABLE test(id integer, name varchar(30))"}
{"instruction": "Show user privileges on database db1?", "input": "", "output": "db1=> show user;\nUSERNAME | SUPERUSER | CREATED | USER_STATUS\n----------+-------------+------------------+-----------------------\ntestuser | t | 2018-04-12 10:00:00.000000 | ACTIVE"}
{"instruction": "Show current date and time in sql?", "input": "", "output": "SELECT CURRENT_TIMESTAMP;"}
{"instruction": "How to check if an oracle instance is running or not?", "input": "", "output": "def isOracleRunning():\n    if os.path.exists(os.path.join(os.environ['HOME'], '.oracle')):\n    return True"}
{"instruction": "How to shutdown an oracle instance?", "input": "", "output": "shutdown immediate;"}
{"instruction": "Drop table from the warehouse?", "input": "", "output": "DROP TABLE warehouse.product;"}
{"instruction": "Select * from warehouse?", "input": "", "output": "*"}
{"instruction": "Create a user and grant him some privileges on db_name ?", "input": "", "output": "CREATE USER 'user_name'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON db_name.* TO 'user_name'@'localhost';"}
{"instruction": "Connect to mysql as root@localhost?", "input": "", "output": "mysql -u root -p"}
{"instruction": "Select * from table_name limit 10?", "input": "", "output": "*"}
{"instruction": "Drop view vw_test ?", "input": "", "output": "DROP VIEW vw_test;"}
{"instruction": "Alter table tablename add column name varchar(20) after id?", "input": "", "output": "alter table tablename add column name varchar(20) after id"}
{"instruction": "Create user bob in snowflake?", "input": "", "output": "CREATE USER 'bob' IDENTIFIED BY 'password';"}
{"instruction": "What is the last table created in snowflake?", "input": "", "output": "CREATE TABLE `snowflake`.`table_name` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Describe tables in schema x in snowflake?", "input": "", "output": "Table x is a dimension table. It has two columns, one for the year and another for the sales amount. The data in this table is aggregated from the fact table."}
{"instruction": "Show grants for user y in snowflake?", "input": "", "output": "grants for user y in snowflake:\n- grantee: y, resource: project1, start_date: 2017-01-01T00:00:00Z, end_date: 2018-12-31T23:59:59Z, created_at: 2017-01-02T00:00:00Z, updated_at: 2017-01-02T00:00:00Z\n- grantee: y, resource: project2, start_date: 2017-01-01T00:00:00Z, end_date: 2018-12-31T23:59:59Z, created_at: 2017-01-02T00:00:00Z, updated_at: 2017-01-02T00:00:00Z"}
{"instruction": "Grant all privileges on my_table to user?", "input": "", "output": "GRANT ALL PRIVILEGES ON my_table TO 'user'@'localhost';"}
{"instruction": "Update table1 set column=column2 where id=1", "input": "Table1: id, column1, column2", "output": "id, column1, column2"}
{"instruction": "Delete from table1 where id=1", "input": "Table1: [id, name]", "output": "Table1 = [2, 'John']"}
{"instruction": "Delete from table1 where id=1", "input": "Table1: [id, name, age]", "output": "Table1 = [3, 'Jane', 25]"}
{"instruction": "What is the primary key of table_name?", "input": "Primary key: id", "output": "table_name"}
{"instruction": "Describe data from table in warehouse?", "input": "", "output": "Table name: Products\nColumns: Product_ID, Name, Category, Price\nRows: 1-10\nData:\nProduct_ID Name Category Price\n1 iPhone Accessories $100.00\n2 Samsung Galaxy Smartphone $200.00\n3 Apple Watch Smartwatch $300.00\n4 iPad Tablet $400.00\n5 Macbook Laptop $500.00\n6 Google Pixel 2 Phone $600.00\n7 Microsoft Surface Pro Tablet $700.00\n8 Xbox One Console $800.00\n9 Playstation 4 Console $900.00\n10 Nintendo Switch Console $1000.00"}
{"instruction": "Create a function that returns 1 if any number is odd and 0 otherwise?", "input": "", "output": "def isOdd(n):\n    if n % 2 == 1:\n     return 0\n    else:\n     return 1"}
{"instruction": "Create table employee(id int primary key, name varchar(30)) in snowflake?", "input": "", "output": "CREATE TABLE employee (id int PRIMARY KEY, name varchar(30))"}
{"instruction": "Insert into employee values (1,'mohammed')?", "input": "", "output": "INSERT INTO employee VALUES (1, 'mohammed')"}
{"instruction": "Select * from employee?", "input": "", "output": "*"}
{"instruction": "Grant all on employee to user3?", "input": "", "output": "grant all on employee to user3;"}
{"instruction": "Connect to db named \"testdb\" as user \"myuser\"?", "input": "", "output": "import psycopg2\nconn = psycopg2.connect(\"dbname='testdb' user='myuser'\")"}
{"instruction": "Disconnect from snowflake db?", "input": "", "output": "use snowflake_db;\ndrop database snowflake_db;"}
{"instruction": "Describe database named \"testdb\"?", "input": "", "output": "testdb is a database with the following tables:\n- \"users\" - contains user information\n- \"posts\" - contains post information"}
{"instruction": "Delete all rows from table my_table in mysql?", "input": "", "output": "DELETE FROM my_table;"}
{"instruction": "Show the columns of table my_table in mysql?", "input": "", "output": "show columns from my_table;"}
{"instruction": "Create trigger trg_my_trigger before insert or update on my_table for each row execute procedure p1() in mysql?", "input": "", "output": "CREATE TRIGGER trg_my_trigger BEFORE INSERT OR UPDATE ON my_table FOR EACH ROW EXECUTE procedure p1()"}
{"instruction": "Create a view that returns the last inserted id for each row?", "input": "id | name\n1 | John\n2 | Mary\n3 | Jane", "output": "3"}
{"instruction": "Drop table from dbname?", "input": "", "output": "DROP TABLE table_name"}
{"instruction": "Create a view on the employee table?", "input": "", "output": "class EmployeeView(models.Model):\n    def __init__(self, *args, **kwargs):\n    super(EmployeeView, self).__init__(*args, **kwargs)\n    self.employees = Employee.objects.all()"}
{"instruction": "Delete from table in snowflake?", "input": "table = [1, 2, 3, 4, 5]", "output": "table = [1, 2, 3, 5]"}
{"instruction": "Delete from table in snowflake?", "input": "table = [1, 2, 3]", "output": "table = [2, 3]"}
{"instruction": "List tables and columns for a given schema in snowflake?", "input": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;", "output": "Table: users\nColumns: id, name"}
{"instruction": "What is the default schema in snowflake?", "input": "", "output": "The default schema is the one that has no name."}
{"instruction": "Create procedure p1() in mysql that returns 1 and call it from snowflake using stored procedures?", "input": "", "output": "CREATE PROCEDURE p1() RETURNS INT AS BEGIN RETURN 1; END; CALL p1();"}
{"instruction": "Can you drop the database db_name in snowflake?", "input": "", "output": "DROP DATABASE IF EXISTS db_name;\nCREATE DATABASE db_name;"}
{"instruction": "Alter column col_name type to type in mysqldb?", "input": "Column: name", "output": "ALTER TABLE `users` CHANGE `name` `name` VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;"}
{"instruction": "Alter column col_name type to type in mysqldb?", "input": "Column: age", "output": "ALTER TABLE `users` CHANGE `age` `age` INT(11) DEFAULT NULL AFTER `name`;"}
{"instruction": "What columns do i have in snowflake? 10.describe a table in snowflake? 11.list all tables in schema? 12.list all views in schema? 13.list all stored procedures in schema? 14.list all functions in schema? 15.list all extended procedures in schema?", "input": "", "output": "1.Columns in snowflake schema are:\n- id\n- name\n- age\n- address\n2.Table in snowflake schema is:\n- person\n3.List all tables in schema?\n4.List all views in schema?\n5.List all stored procedures in schema?\n6.List all functions in schema?\n7.List all extended procedures in schema?\n8.List all columns in table person?\n9.List all indexes in table person?\n10.Describe a table in snowflake?\n11.List all tables in schema?\n12.List all views in schema?\n13.List all stored procedures in schema?\n14.List all functions in schema?\n15.List all extended procedures in schema?"}
{"instruction": "Select * from my_table where name like '%@d%'?", "input": "", "output": "* from my_table where name like '%@d%'"}
{"instruction": "Update my_table set name='hello' where id=1?", "input": "", "output": "UPDATE my_table SET name='hello' WHERE id=1"}
{"instruction": "Create a view on table3 as select * from table4 where id=1", "input": "Table1: id, name, age\nTable2: id, phone_number, address\nTable3: id, name, phone_number, address\nTable4: id, name, age, address", "output": "id, name, phone_number, address"}
{"instruction": "List all columns in table6?", "input": "", "output": "id, name, age, gender, country, city"}
{"instruction": "Create index i_table7 on table8 (column9)?", "input": "", "output": "CREATE INDEX i_table7 ON table8 (column9);"}
{"instruction": "Describe all the columns of table a_table?", "input": "Table: a_table = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]", "output": "a_table has 3 columns. The first column is the row number (starting from 0), the second column is the value in that row and the third column is the value of the previous row."}
{"instruction": "Describe all the columns of table a_table?", "input": "Table: a_table = [[1, 2], [3, 4], [5, 6]]", "output": "a_table has 3 columns. The first column is the row number (starting from 0), the second column is the value in that row and the third column is the value of the previous row."}
{"instruction": "Create an index on column name1 and column name2?", "input": "", "output": "CREATE INDEX index_name1_index_name2 ON table_name (column_name1, column_name2);"}
{"instruction": "Create a trigger on table a_table?", "input": "", "output": "CREATE TRIGGER a_table_trigger AFTER INSERT ON a_table FOR EACH ROW BEGIN UPDATE a_table SET col = col + 1 WHERE id = NEW.id; END"}
{"instruction": "Create a new role in the schema and grant privileges to it?", "input": "", "output": "CREATE ROLE [role_name] WITH LOGIN;\nGRANT ALL ON schema.* TO [role_name];"}
{"instruction": "Assign roles to users?", "input": "List: [{'name': 'John', 'age': 25}, {'name': 'Jane', 'age': 23}]", "output": "John, Jane"}
{"instruction": "Show columns of table?", "input": "", "output": "table = [[1, 2], [3, 4]]\ncolumns = table[0].index(row) + 1\nprint columns"}
{"instruction": "Create table my_table (id int, name varchar(20))", "input": "", "output": "CREATE TABLE my_table (id int, name varchar(20))"}
{"instruction": "Select count(*) from my_table", "input": "", "output": "3"}
{"instruction": "List the users in your database?", "input": "", "output": "def listUsers():\n    users = []\n    for user in db.query(\"SELECT * FROM users\"):\n    users.append(user)\n    return users"}
{"instruction": "Create an external table for my data warehouse in snowflake?", "input": "", "output": "CREATE EXTERNAL TABLE [dbo].[my_data_warehouse](\n[id] [int] NOT NULL,\n[name] [varchar](50) NULL,\nCONSTRAINT [PK_my_data_warehouse] PRIMARY KEY CLUSTERED (\n[id] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]"}
{"instruction": "Get information about schema and data from my table in snowflake?", "input": "", "output": "Schema:\nName Type Description\nid bigint IDENTITY(1,1) NOT NULL,\nname varchar(50) NOT NULL,\nage int NOT NULL,\ngender char(1) NOT NULL,\ncreated_at timestamp without time zone NOT NULL,\nupdated_at timestamp without time zone NOT NULL,\ndata jsonb NOT NULL\nData:\n{ \"id\": 1, \"name\": \"John\", \"age\": 25, \"gender\": \"M\", \"created_at\": \"2018-01-01T00:00:00.000Z\", \"updated_at\": \"2018-01-01T00:00:00.000Z\" }"}
{"instruction": "Show users where userid = 'snowflake'", "input": "", "output": "<form action=\"/profile/\" method=\"post\">\n</form>"}
{"instruction": "Show users where userid = 'snowflake'", "input": "", "output": "<form action=\"/profile/snowflake\" method=\"post\">\n</form>"}
{"instruction": "Connect to snowflake as another user?", "input": "", "output": "ssh -l root [Server]"}
{"instruction": "Connect to snowflake as another user?", "input": "", "output": "snowflake@snowflake:~$ ssh -l [User] [Server]"}
{"instruction": "Connect to snowflake as another user?", "input": "", "output": "ssh -l snowflake [Server]"}
{"instruction": "Drop all objects from snowflake?", "input": "Snowflake with 3 objects.", "output": "Drop all objects."}
{"instruction": "Drop all objects from snowflake?", "input": "Snowflake with 5 objects.", "output": "Drop 4 objects."}
{"instruction": "Update a user in snowflake?", "input": "{ \"name\": \"John\", \"age\": 25, \"address\": { \"street\": \"Main Street\", \"city\": \"New York\" } }", "output": "{ \"name\": \"John\", \"age\": 25, \"address\": { \"street\": \"Main Street\", \"city\": \"New York\" }, \"updated_at\": \"2018-01-01T00:00:00Z\" }"}
{"instruction": "Create a view with name vw as select * from snowflake where col1 = 'abc'?", "input": "", "output": "class View(object):\n    def __init__(self, table_name, col1):\n    self.table_name = table_name\n    self.col1 = col1\n    def select(self, *args, **kwargs):\n    return super().select(*args, **kwargs)\n    class Model(object):\n    def __init__(self, table_name, col1):\n    self.table_name = table_name\n    self.col1 = col1\n    def get_view(self):\n    return View(self.table_name, self.col1)"}
{"instruction": "What is the data type of column z?", "input": "", "output": "(a) string (b) integer (c) boolean (d) float"}
{"instruction": "Drop role r from schema s?", "input": "Schema: CREATE TABLE users (id int, name text);\nDROP ROLE user;", "output": "DROP ROLE user"}
{"instruction": "Drop role r from schema s?", "input": "Schema: CREATE TABLE users (id int, name text);\nDROP ROLE admin;", "output": "DROP ROLE admin"}
{"instruction": "Create a view v in schema x on table t?", "input": "Schema: x = {'name': 'person', 'age': 'integer'}\nTable: t = {'name': 'person', 'age': 'integer'}\nView: v = {'name': 'person', 'age': 'integer'}", "output": "v = {'name': 'person', 'age': 'integer'}"}
{"instruction": "How to find the owner of an object?", "input": "", "output": "class Solution(object):\n    def findOwner(self, obj):\n    for i in range(len(obj.owner)):\n    if obj == obj.owner[i]:\n    return i\n    return -1"}
{"instruction": "Grant privileges on db1 to my_role?", "input": "", "output": "GRANT SELECT, UPDATE ON db1.* TO my_role;"}
{"instruction": "Revoke privileges from my_role on db1?", "input": "", "output": "revoke my_role on db1 from user@localhost"}
{"instruction": "How many indexes do i have on table my_table?", "input": "", "output": "def count_indexes(table):\n    indexes = 0\n    for i in range(len(table)):\n        if table[i] == 'a':\n          indexes += 1\n    return indexes"}
{"instruction": "Get column info for column my_col2 in table my_table?", "input": "", "output": "Column Type Null Key Default Extra my_col2 integer NULL 0"}
{"instruction": "What is a view in snowflake?", "input": "", "output": "A view is a virtual table that can be queried and updated."}
{"instruction": "Change role to admin?", "input": "", "output": "class Solution(object):\n    def changeRole(self, user, role):\n    if user.role == role:\n    return True"}
{"instruction": "Alter table t1 set t2 = 'foo'?", "input": "", "output": "alter table t1 set t2 = 'foo'"}
{"instruction": "Alter table my_table add constraint my_pk primary key (col1, col2) in snowflake?", "input": "", "output": "alter table my_table add constraint my_pk primary key (col1, col2) in snowflake"}
{"instruction": "What are the constraints on my_table in snowflake?", "input": "", "output": "my_table must be a dictionary.\nmy_table['column1'] must be an integer."}
{"instruction": "What are the constraints on my_table in snowflake?", "input": "my_table = {'column1': 10, 'column2': 20}", "output": "Column1 must be an integer."}
{"instruction": "What are the constraints on my_table in snowflake?", "input": "my_table = {'column1': 10, 'column2': 20, 'column3': 30}", "output": "Column1 must be an integer."}
{"instruction": "Add user to the warehouse role", "input": "", "output": "def add_user(self, user):\n    self.users[user.id] = user\n    return user"}
{"instruction": "List all tables with warehouseid=1", "input": "", "output": "warehouseid, warehousename, city, state, zipcode\n1, Warehouse 1, New York, NY, 10001"}
{"instruction": "Connect to mysql and show databases", "input": "", "output": "import mysql.connector\nconn = mysql.connector.connect(user='root', password='123456')\ncur = conn.cursor()\ncur.execute('show databases;')\nfor row in cur:\nprint(row)\nconn.close()"}
{"instruction": "Describe warehouse in my_database?", "input": "", "output": "warehouse(id, name, address, city, state, zipcode)"}
{"instruction": "Drop table abc from snowflake?", "input": "", "output": "DROP TABLE abc;"}
{"instruction": "Drop database mydb from snowflake?", "input": "", "output": "DROP DATABASE mydb;"}
{"instruction": "How do i find out what databases are available to me in snowflake?", "input": "", "output": "SELECT * FROM DATABASES;"}
{"instruction": "Insert into test values (1,'a')", "input": "", "output": "INSERT INTO test VALUES (1,'a')"}
{"instruction": "Select * from test?", "input": "", "output": "*"}
{"instruction": "Drop tables from database with name 'snowflake'?", "input": "", "output": "DROP TABLE IF EXISTS snowflake."}
{"instruction": "Restore a backup into another schema?", "input": "", "output": "CREATE TABLE `restore_table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nINSERT INTO `restore_table` VALUES (NULL),('test'),('test2');\nALTER TABLE `restore_table` RENAME TO `test_table`;\nDROP TABLE IF EXISTS `test_table`;\nCREATE TABLE `test_table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nINSERT INTO `test_table` VALUES (NULL),('test'),('test2');"}
{"instruction": "Show me the current schema of my db?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`user_id` int(11) DEFAULT NULL,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`),\nKEY `user_id` (`user_id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `comments` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`post_id` int(11) DEFAULT NULL,\n`comment` text,\nPRIMARY KEY (`id`),\nKEY `post_id` (`post_id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Drop a database from the server?", "input": "", "output": "DROP DATABASE [Database Name]"}
{"instruction": "List all schemas on this mysql instance?", "input": "", "output": "show schemas;"}
{"instruction": "Create a new table with 10 columns, 3 rows and 2 data types?", "input": "", "output": "CREATE TABLE table1 ("}
{"instruction": "What is my current user id?", "input": "", "output": "import os\nprint(os.getuid())"}
{"instruction": "What schema am i currently using?", "input": "", "output": "Schema: {'name': 'person', 'age': int, 'height': float}"}
{"instruction": "What is the difference between an empty string and null in sql?", "input": "", "output": "An empty string is a string with zero length. Null is a special value that indicates the absence of a value."}
{"instruction": "How do i find out what databases exist on my server?", "input": "", "output": "mysql -u root -p\nshow databases;"}
{"instruction": "Is there a limit to how many columns i can have in a table?", "input": "", "output": "Yes, there is a limit."}
{"instruction": "What are the column types for each column in my table?", "input": "Columns: Name, Age, Gender, City", "output": "String, Integer, String, String"}
{"instruction": "How do i get started with snowflake?", "input": "", "output": "https://snowflake.teradata.com/docs/r17-1/index.html"}
{"instruction": "Create a view on top of existing table, like select * from my_table?", "input": "", "output": "CREATE VIEW my_table_view AS SELECT * FROM my_table;"}
{"instruction": "Alter function to return string type?", "input": "def get_name(person):\n    return person.first_name + ' ' + person.last_name", "output": "def get_name(person):\n    return str(person.first_name) + ' ' + str(person.last_name)"}
{"instruction": "Create index on an existing column?", "input": "", "output": "CREATE INDEX ON table_name (column_name);"}
{"instruction": "Create index on an existing column?", "input": "", "output": "ALTER TABLE table_name ADD INDEX index_name (column_name);"}
{"instruction": "Create trigger for insert/update/delete on a table?", "input": "", "output": "CREATE TRIGGER [INSERT_TRIGGER] ON [TABLE] FOR INSERT, UPDATE AS\nBEGIN\nEND;\nCREATE TRIGGER [UPDATE_TRIGGER] ON [TABLE] FOR UPDATE AS\nBEGIN\nEND;\nCREATE TRIGGER [DELETE_TRIGGER] ON [TABLE] FOR DELETE AS\nBEGIN\nEND;"}
{"instruction": "Create stored procedure that takes two input parameters and returns output parameter?", "input": "", "output": "CREATE PROCEDURE [dbo].[GetEmployeeDetails] ( @FirstName nvarchar(50), @LastName nvarchar(50) ) AS BEGIN SET NOCOUNT ON; SELECT FirstName, LastName FROM Employees WHERE FirstName = @FirstName AND LastName = @LastName END"}
{"instruction": "Create a table named testtable (name,age)?", "input": "", "output": "name | age\nGeorge Washington | 57\nConfucius | 55\nMichael Jordan | 53\nMichelangelo | 52\nYoshua Bengio | 50\nAlan Turing | 49\nGeoffrey Hinton | 48"}
{"instruction": "Update testtable set name='bob' where age=40;", "input": "", "output": "UPDATE testtable SET name='bob' WHERE age=40;"}
{"instruction": "Select * from testtable;", "input": "", "output": "*"}
{"instruction": "Delete from testtable where name='bob';", "input": "", "output": "DELETE FROM testtable WHERE name='bob';"}
{"instruction": "Create table with same schema as 'my_table' in my_database?", "input": "", "output": "CREATE TABLE `my_table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Create an index on abc column of t1 table?", "input": "", "output": "CREATE INDEX abc_index ON t1(abc);"}
{"instruction": "List all indexes for t1 table?", "input": "", "output": "t1.idx_a, t1.idx_b, t1.idx_c, t1.idx_d, t1.idx_e, t1.idx_f, t1.idx_g, t1.idx_h, t1.idx_i, t1.idx_j, t1.idx_k, t1.idx_l, t1.idx_m, t1.idx_n, t1.idx_o, t1.idx_p, t1.idx_q, t1.idx_r, t1.idx_s, t1.idx_t, t1.idx_u, t1.idx_v, t1.idx_w, t1.idx_x, t1.idx_y, t1.idx_z"}
{"instruction": "Restart instance in snowflake?", "input": "", "output": "Restart instance in snowflake."}
{"instruction": "List the schemas in a snowflake warehouse?", "input": "", "output": "Schema, PartitionKey, RowKey, ColumnFamilies, ColumnQualifiers, ReadPreference, WritePreference, ProvisionedThroughput, StorageClass, Durability, TableName"}
{"instruction": "Describe table1 in db2?", "input": "", "output": "db2=> desc table1;\nName Null? Type\n---- -------- ------------\nID NOT NULL NUMBER(10)\nNAME VARCHAR2(20)\nAGE NUMBER(5)\nSALARY NUMBER(7,2)\nPRIMARY KEY (ID)"}
{"instruction": "Grant create any procedure to user foo?", "input": "", "output": "CREATE PROCEDURE foo()"}
{"instruction": "What are my privileges?", "input": "", "output": "You have the following privileges:\n- Read\n-Write"}
{"instruction": "Create a procedure that takes two arguments and returns the sum of them?", "input": "", "output": "def sum(a, b):\n    return a + b"}
{"instruction": "Select * from my_view;", "input": "", "output": "*"}
{"instruction": "List all tables on this host?", "input": "", "output": "$ sudo ls /var/lib/mysql/ | grep -v db_"}
{"instruction": "Alter a table in hr schema?", "input": "", "output": "alter table employees add (name varchar(50));"}
{"instruction": "Grant update on my_view to user1?", "input": "", "output": "UPDATE my_view SET user_id = 1 WHERE id = 2"}
{"instruction": "Connect to mysql with root credentials?", "input": "", "output": "import mysql.connector\nmysql_connector = mysql.connector.connect(user='root', password='123456')"}
{"instruction": "Drop the role you just created?", "input": "", "output": "DROP ROLE [Your Role]"}
{"instruction": "Create a new schema with name 'snowflake' in dbname?", "input": "", "output": "CREATE SCHEMA snowflake;"}
{"instruction": "Drop user from role_name in database dbname?", "input": "drop user bob from dbname", "output": "Successfully dropped user 'bob' from database 'dbname'."}
{"instruction": "List all users in the role_name?", "input": "Role: admin, user", "output": "admin, user"}
{"instruction": "List all users in the role_name?", "input": "Role: admin, user, manager", "output": "admin, user, manager"}
{"instruction": "Grant permission to access on schema \"dbo\" for user \"admin\"?", "input": "", "output": "GRANT"}
{"instruction": "Grant select on table tbl1 to user \"user\"?", "input": "", "output": "GRANT SELECT ON tbl1 TO user"}
{"instruction": "Create a table with columns id, name and salary in the test schema?", "input": "", "output": "CREATE TABLE test.employee (id INT, name VARCHAR(20), salary DECIMAL(10, 2));"}
{"instruction": "Backup a table from a database?", "input": "", "output": "class Solution(object):\n   def backupTable(self, db, tableName):\n        self.conn = sqlite3.connect(db)"}
{"instruction": "List all tables that have no primary key defined?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)\n);\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`)\n);\nCREATE TABLE `tags` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`tag` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)\n);\nCREATE TABLE `comments` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`post_id` int(11) NOT NULL,\n`comment` text,\nPRIMARY KEY (`id`),\nKEY `post_id` (`post_id`),\nCONSTRAINT `fk_comments_on_posts` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`) ON DELETE CASCADE\n);"}
{"instruction": "List all indexes on a table with their types and names?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE INDEX `name_index` (`name` ASC)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Alter view to use another column for sorting", "input": "View:\n<html>\n<body>\n<h1>Alphabetical List of Countries</h1>\n<table border=\"1\">\n<tr>\n<th>Country</th>\n<th>Capital</th>\n</tr>\n<tr>\n<td>Afghanistan</td>\n<td>Kabul</td>\n</tr>\n<tr>\n<td>Albania</td>\n<td>Tirana</td>\n</tr>\n<tr>\n<td>Algeria</td>\n<td>Algiers</td>\n</tr>\n</table>\n</body>\n</html>", "output": "Alphabetical List of Countries\n<html>\n<body>\n<h1>Sorted Alphabetical List of Countries</h1>\n<table border=\"1\">\n<tr>\n<th>Country</th>\n<th>Capital</th>\n</tr>\n<tr>\n<td>Albania</td>\n<td>Tirana</td>\n</tr>\n<tr>\n<td>Algeria</td>\n<td>Algiers</td>\n</tr>\n<tr>\n<td>Afghanistan</td>\n<td>Kabul</td>\n</tr>\n<tr>\n<td>Algeria</td>\n<td>Algiers</td>\n</tr>\n</table>\n</body>\n</html>"}
{"instruction": "List columns of table \"snowflake\"?\"address\"?", "input": "", "output": "id, name, street, city, state, zipcode, country_id"}
{"instruction": "Drop a table in mysql?", "input": "", "output": "DROP TABLE IF EXISTS `users`;\nCREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)\n);"}
{"instruction": "Select from multiple databases in mysql?", "input": "", "output": "USE db1;\nSELECT * FROM table1;\nUSE db2;\nSELECT * FROM table2;\nUSE db3;\nSELECT * FROM table3;"}
{"instruction": "Create a role with the same name as an existing one?", "input": "", "output": "CREATE ROLE [role_name] WITH LOGIN;"}
{"instruction": "Drop a table from a warehouse that does not exist?", "input": "", "output": "DROP TABLE IF EXISTS warehouse"}
{"instruction": "List all warehouses and their owners?", "input": "", "output": "Warehouse 1 - Owner: John Smith\nWarehouse 2 - Owner: Jane Doe\nWarehouse 3 - Owner: Jack Black"}
{"instruction": "Connect to a non-existent dbname?", "input": "", "output": "db = Database(None)\ndb.connect()"}
{"instruction": "Create a trigger on abc table for insert, update and delete operations?", "input": "", "output": "CREATE TRIGGER abc_insert ON abc FOR INSERT AS\nINSERT INTO abc VALUES (new.id, new.name, new.age);\nCREATE TRIGGER abc_update ON abc FOR UPDATE AS\nUPDATE abc SET name = new.name WHERE id = new.id;\nCREATE TRIGGER abc_delete ON abc FOR DELETE AS\nDELETE FROM abc WHERE id = old.id;"}
{"instruction": "Alter the primary key of abc to be an identity column?", "input": "", "output": "alter table abc add column id int not null identity(1,1)"}
{"instruction": "List all tables with constraint fk_xyz?", "input": "", "output": "CREATE TABLE `t1` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `fk_xyz` (`name`,`x`,`y`)\n);\nCREATE TABLE `t2` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `fk_xyz` (`name`,`x`,`y`)\n);\nCREATE TABLE `t3` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `fk_xyz` (`name`,`x`,`y`)\n);"}
{"instruction": "Create a view vwxyz as select * from tblabc where x>y?", "input": "Table: tblabc\nColumns: x, y", "output": "vwxyz"}
{"instruction": "Grant update permission to user \"john\" on warehouse?", "input": "", "output": "def updatePermission(user, warehouse):\n    if user == \"john\":\n        return True"}
{"instruction": "Revoke update permission from john on warehouse?", "input": "", "output": "warehouse.revokeUpdatePermission(\"john\")"}
{"instruction": "Revoke select permission on warehouse from jane?", "input": "", "output": "revoke select on warehouse from jane"}
{"instruction": "Create view testview as select * from a_table?", "input": "", "output": "CREATE VIEW testview AS SELECT * FROM a_table;"}
{"instruction": "Describe table a_table in mydb?", "input": "", "output": "Table \"mydb.a_table\" Column | Type | Modifiers ------------+-----------------------------+----------------------------------------------------- id | integer | not null default nextval('a_table_id_seq'::regclass) name | character varying(255) | not null email | character varying(255) | not null created_at | timestamp without time zone | not null updated_at | timestamp without time zone | not null Indexes: \"a_table_pkey\" PRIMARY KEY, btree (id)"}
{"instruction": "What is the difference between create table and create view in snowflake?", "input": "", "output": "create table creates a new table in the database. It is used to store data permanently.\ncreate view creates a virtual table that does not contain any data, but instead refers to the data stored in one or more tables. A view can be thought of as a virtual table whose definition can be changed without affecting the underlying base tables."}
{"instruction": "Can you explain sql*loader?", "input": "", "output": "SQL*Loader is a utility that reads data from one or more files and loads the data into an Oracle database. The data can be delimited, fixed-width, or free-form text. SQL*Loader also supports loading data from relational tables, external tables, and views."}
{"instruction": "Create table my_table (col1 varchar(20), col2 date) engine=myisam;", "input": "", "output": "CREATE TABLE `my_table` (\n`col1` varchar(20) DEFAULT NULL,\n`col2` date DEFAULT NULL\nENGINE=MyISAM\n);"}
{"instruction": "What is the default storage engine for mysql?", "input": "", "output": "InnoDB"}
{"instruction": "How do i change the default storage engine to innodb?", "input": "", "output": "ALTER TABLE [table_name] ENGINE=INNODB;"}
{"instruction": "How many databases are there on this server?", "input": "", "output": "There are 3 databases on this server."}
{"instruction": "What's the name of your current database?", "input": "", "output": "SELECT name FROM information_schema.schemata WHERE schema_name = 'current';"}
{"instruction": "Drop the table testtable;", "input": "", "output": "DROP TABLE testtable;"}
{"instruction": "Restore all tables from a backup in mysql?", "input": "", "output": "mysql> restore tables from 'backup.sql'"}
{"instruction": "Find the largest value of column in a table?", "input": "Table: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "output": "3"}
{"instruction": "Drop view named testview?", "input": "", "output": "DROP VIEW testview;"}
{"instruction": "Describe all views in snowflake schema named sales?", "input": "", "output": "sales_view1, sales_view2, sales_view3, sales_view4, sales_view5, sales_view6, sales_view7, sales_view8, sales_view9, sales_view10"}
{"instruction": "List tables and columns of the view called \"testview\"?", "input": "", "output": "CREATE VIEW testview AS SELECT * FROM users;\nTable \"public.testview\"\nColumn | Type | Modifiers \n| \n| id | bigint(20) unsigned | not null default nextval('testview_id_seq'::regclass)\n| name | text |\n| email | text |\n| phone | text |\n| created_at | timestamp without time zone | not null default now()\n| updated_at | timestamp without time zone | not null default now()"}
{"instruction": "Describe function that begin with the letter \"f\" in snowflake schema?", "input": "", "output": "def f(x):\n    return x * 2"}
{"instruction": "Delete a user from the system?", "input": "", "output": "def deleteUser(user):\n    user.delete()"}
{"instruction": "Update data in a table in snowflake?", "input": "Table: [1, 2, 3]", "output": "[1, 2, 3, 4]"}
{"instruction": "How to check if a user is active or inactive?", "input": "User is active if the user has logged in within the last 30 days.", "output": "Active"}
{"instruction": "How to check if a user is active or inactive?", "input": "User is inactive if the user has not logged in for more than 30 days.", "output": "Inactive"}
{"instruction": "Alter warehouse in snowflake?", "input": "", "output": "class Solution(object):\n    def alterWarehouse(self, warehouse):\n    if self.isValid(warehouse):\n    return warehouse\n    else:\n    raise Exception(\"Invalid warehouse\")"}
{"instruction": "Create table my_table (col1 number, col2 varchar(100))", "input": "", "output": "CREATE TABLE my_table (col1 number, col2 varchar(100))"}
{"instruction": "What tables are owned by john?", "input": "", "output": "john owns the following tables:\n- employees\n- departments\n- projects\n- addresses"}
{"instruction": "What is the last backup date for warehouse?", "input": "", "output": "last_backup_date = datetime.datetime(2015, 1, 1) + timedelta(days=365)"}
{"instruction": "What is the last backup date for warehouse?", "input": "warehouse = 'warehouse'", "output": "last_backup_date = datetime.datetime(2015, 1, 1) + timedelta(days=365)"}
{"instruction": "What is the last backup date for warehouse?", "input": "warehouse = 'warehouse1'", "output": "last_backup_date = datetime.datetime(2016, 1, 1) + timedelta(days=365)"}
{"instruction": "Who has permissions on table warehouse?", "input": "", "output": "John"}
{"instruction": "What roles have i been given access to?", "input": "", "output": "- admin\n- user"}
{"instruction": "Create table with primary key constraint in snowflake?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;"}
{"instruction": "Add index to table in snowflake?", "input": "table = [1, 2, 3, 4, 5]", "output": "table[0], table[1], table[2], table[3], table[4], table[5]"}
{"instruction": "Add index to table in snowflake?", "input": "table = [1, 2, 3]", "output": "table[0], table[1], table[2]"}
{"instruction": "Insert into table employee(id int, name varchar(30)) values (1,'john')?", "input": "", "output": "INSERT INTO employee(id, name) VALUES (1,'john')"}
{"instruction": "List all tables with a column of type char(30)", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(30) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`),\nKEY `title` (`title`),\nKEY `body` (`body`),\nCONSTRAINT `fk_posts_users` FOREIGN KEY (`id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Revoke select on snowflake from user1", "input": "", "output": "revokes select on snowflake from user1"}
{"instruction": "Select * from my_table where column1 = 'new value'?", "input": "", "output": "*"}
{"instruction": "Create a view called my_view on warehouse, location and employee in snowflake?", "input": "", "output": "class View(object):\n   def __init__(self, warehouse, location, employee):\n   self.warehouse = warehouse\n \n  self.location = location\n \n self.employee = employee"}
{"instruction": "Alter view my_view to include new columns?", "input": "View: my_view", "output": "Alter view my_view to include new columns?\n- Yes, I can do that.\n- No, I cannot do that."}
{"instruction": "Create index on (name,salary) in sales schema?", "input": "", "output": "CREATE INDEX ON sales(name,salary);"}
{"instruction": "Drop index from sales schema named name_idx?", "input": "", "output": "DROP INDEX name_idx ON sales;"}
{"instruction": "How many days are there between 1-jan-2009 to 31-dec-2010?", "input": "", "output": "365"}
{"instruction": "Find out last day of month for each month in 2010?", "input": "", "output": "January - 31st, February - 28th, March - 31st, April - 30th, May - 31st, June - 30th, July - 31st, August - 31st, September - 30th, October - 31st, November - 30th, December - 31st."}
{"instruction": "Show schema of view ?", "input": "", "output": "CREATE VIEW view_name AS SELECT column1, column2 FROM table_name;"}
{"instruction": "Connect to mysql database on localhost with username 'root' and password 'password'?", "input": "", "output": "import mysql.connector\nmysql_db = 'test'\nmysql_user = 'root'\nmysql_pwd = 'password'\nconn = mysql.connector.connect(host='localhost', user=mysql_user, password=mysql_pwd, db=mysql_db)"}
{"instruction": "Which one is better for small scale applications?", "input": "", "output": "- Python\n- C++"}
{"instruction": "Create a new user with name 'testuser' and password 'password'?", "input": "", "output": "user = User(name='testuser', password='password')"}
{"instruction": "Give me the date when employee was created?", "input": "", "output": "Employee.create(name='John Doe', email='john@example.com', phone_number='+1-555-555-5555')"}
{"instruction": "What is the difference between two dates: sysdate-1day,sysdate+1day?", "input": "", "output": "sysdate-1day = datetime.datetime(2018, 1, 2)\nsysdate+1day = datetime.datetime(2018, 1, 3)"}
{"instruction": "Create a new user with password 'pwd' for role dba?", "input": "", "output": "CREATE USER [email protected] IDENTIFIED BY 'pwd' ;\nGRANT dba TO [email protected];"}
{"instruction": "Grant permission to a user on a database, owner is the same as user?", "input": "", "output": "def grantPermission(user, permission):\n    if user == owner:\n    return True"}
{"instruction": "Delete a table from the database?", "input": "", "output": "DELETE FROM table_name;"}
{"instruction": "Describe the privileges of a user?", "input": "", "output": "A user can create, read, update and delete data."}
{"instruction": "What is the default schema for an administrator?", "input": "", "output": "admin"}
{"instruction": "Create a new view from database mydb?", "input": "", "output": "CREATE OR REPLACE VIEW mydb.myview AS SELECT * FROM mydb.mytable;"}
{"instruction": "Where is user xyz?", "input": "User location: San Francisco, CA", "output": "Home"}
{"instruction": "Where is user xyz?", "input": "User location: New York, NY", "output": "Traveling"}
{"instruction": "Where is user xyz?", "input": "User location: Mountain View, CA", "output": "Work"}
{"instruction": "Show all the columns of mytable in database mydb?", "input": "", "output": "show columns from mytable in database mydb;"}
{"instruction": "Show all the columns of mytable in database mydb?", "input": "", "output": "Database: mydb, Table: mytable\nColumn Type Null Key Default Extra\nid int(11) NO PRI NULL auto_increment\nname varchar(50) YES NULL\nage int(11) YES NULL\ncity varchar(20) YES NULL\ncountry varchar(30) YES NULL"}
{"instruction": "List all columns in table with name 'test'?", "input": "", "output": "test.a, test.b, test.c, test.d, test.e, test.f, test.g, test.h, test.i, test.j, test.k, test.l, test.m, test.n, test.o, test.p, test.q, test.r, test.s, test.t, test.u, test.v, test.w, test.x, test.y, test.z"}
{"instruction": "Drop function add2int from database 'snowflake'?", "input": "", "output": "DROP FUNCTION add2int;"}
{"instruction": "List table names in schema 'my_schema' with column names and types?", "input": "", "output": "table_name | column_name | type\n- ------------+-------------------+-------\n- my_table | id | integer\n- my_table | name | text\n- my_table | age | integer"}
{"instruction": "Update my_table set col1 = 3 where col2 = 5;", "input": "", "output": "UPDATE my_table SET col1 = 3 WHERE col2 = 5;"}
{"instruction": "Update table in mysql database?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nINSERT INTO `users` (`id`, `name`) VALUES (NULL, 'John Doe');\nALTER TABLE `users` ADD INDEX `index_name` (`name`);\nUPDATE `users` SET `name` = 'New Name' WHERE `id` = 1;\nDELETE FROM `users` WHERE `id` = 1;\nDROP TABLE `users`;"}
{"instruction": "Connect to mysql and select a database called testdb?", "input": "", "output": "import mysql.connector\nconn = mysql.connector.connect(user='root', password='123456')\ndb = conn.cursor()\ndb.execute('select * from testdb? limit 1')\nprint db.fetchone()[0]"}
{"instruction": "Create a new database called testdb?", "input": "", "output": "CREATE DATABASE testdb;"}
{"instruction": "Show databases in mysql database?", "input": "", "output": "+--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | test | +--------------------+ 4 rows in set (0.00 sec)"}
{"instruction": "Show databases in mysql database?", "input": "", "output": "+--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | +--------------------+ 3 rows in set (0.00 sec)"}
{"instruction": "Show databases in mysql database?", "input": "", "output": "SHOW DATABASES;"}
{"instruction": "Drop user in oracle?", "input": "", "output": "import sys\nif len(sys.argv) != 2:\nprint(\"Usage: python dropuser.py username\")\nelse:\nprint(\"Dropping user '%s'...\" % sys.argv[1])\nos.system('dropuser %s' % sys.argv[1])"}
{"instruction": "Describe database in oracle?", "input": "", "output": "A database is a collection of related data. It is a repository of information that can be accessed by various users and applications. A database management system (DBMS) is a software application that interacts with the user, other applications, and the database itself to capture and analyze data. The DBMS provides mechanisms for creating, storing, retrieving, updating, and deleting records, as well as supporting data integrity, data security, and data access control."}
{"instruction": "Create a table with the following columns: name varchar2(30), address varchar2(50) and phone number varchar2(15).", "input": "", "output": "name | address | phone number\nJohn Smith | 123 Main Street, New York | (212) 555-1234\nJane Doe | 456 First Avenue, New York | (212) 555-4321\nMary Johnson | 789 Fifth Avenue, New York | (212) 555-6789"}
{"instruction": "Can i have null values in my data?", "input": "", "output": "Yes, you can have null values in your data."}
{"instruction": "Is there any transaction support in snowflake?", "input": "", "output": "Yes, there is."}
{"instruction": "Do you need to use primary keys in your tables?", "input": "", "output": "Primary keys are used to uniquely identify a record in a table. They are also called as candidate keys or natural keys. Primary keys can be defined by the user or generated automatically by the database system. In most cases, primary keys are recommended for tables that have more than one column."}
{"instruction": "Alter table add constraint in snowflake?", "input": "Table: users\nColumns: id, name, age\nConstraints:\n- primary key (id)\n- unique (name)", "output": "alter table add constraint fk_users_users foreign key (id) references users(id);"}
{"instruction": "Drop user from snowflake?", "input": "", "output": "def drop_user(snowflake):\n    for i in range(len(snowflake)):\n    if snowflake[i] == user:\n    del snowflake[i]\n    return snowflake"}
{"instruction": "Show grants for the current user?", "input": "", "output": "grants = [{'user_id': '1234567890', 'role': 'admin', 'resource': '*'}, {'user_id': '1234567890', 'role': 'editor', 'resource': 'posts'}]"}
{"instruction": "Revoke all privileges of bob on schema myschema?", "input": "", "output": "revoke all privileges on schema myschema from bob;"}
{"instruction": "Connect to an existing dbname?", "input": "", "output": "import sqlite3 as lite\nconn = lite.connect('test.db')"}
{"instruction": "Alter table tablename drop column name?", "input": "", "output": "ALTER TABLE tablename DROP COLUMN name"}
{"instruction": "Create index on table abc?", "input": "", "output": "CREATE INDEX abc_index ON table(column1, column2);"}
{"instruction": "Drop index from table abc?", "input": "", "output": "DROP INDEX abc_index"}
{"instruction": "Create view abc as select * from table1,table2?", "input": "", "output": "class Solution(object):\n    def createView(self, table1, table2):\n        view = Table('abc', metadata, Column('id', Integer, primary_key=True), Column('name', String(50)), Column('age', Integer))\n    for row in table1.select():\n        view.insert().execute(row)\n    for row in table2.select():\n        view.update().execute(row)"}
{"instruction": "List all backups of a table in snowflake?", "input": "", "output": "CREATE TABLE `snowflake`.`table_name` (\n`id` int(11) NOT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nCREATE TABLE `snowflake`.`table_name_backup` (\n`id` int(11) NOT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nALTER TABLE `snowflake`.`table_name` ADD CONSTRAINT `unique_table_name_id` UNIQUE (`id`);\nALTER TABLE `snowflake`.`table_name_backup` ADD CONSTRAINT `unique_table_name_id` UNIQUE (`id`);\nSELECT * FROM `snowflake`.`table_name` WHERE id = 1;\nSELECT * FROM `snowflake`.`table_name_backup` WHERE id = 1;"}
{"instruction": "Restore from backup on another host in snowflake?", "input": "", "output": "import os, shutil, tarfile\ndef restore(backup_dir):\n    for file in os.listdir(backup_dir):\n       if not file.endswith(\".tar\"):\n       continue\n    with open(os.path.join(backup_dir, file), \"rb\") as f:\n       data = f.read()\n    with tarfile.open(file, \"r|b\") as t:\n       t.extractall()"}
{"instruction": "Create database db1 in mysql and move tables to it from snowflake?", "input": "", "output": "CREATE DATABASE db1;\nUSE db1;\nDROP TABLE IF EXISTS t1,t2,t3;\nCREATE TABLE t1(id INT);\nINSERT INTO t1 VALUES (1),(2),(3);\nCREATE TABLE t2(id INT);\nINSERT INTO t2 VALUES (1),(2),(3);\nCREATE TABLE t3(id INT);\nINSERT INTO t3 VALUES (1),(2),(3);\nUSE snowflake;\nDROP TABLE IF EXISTS t1,t2,t3;\nCREATE TABLE t1(id INT);\nINSERT INTO t1 VALUES (1),(2),(3);\nCREATE TABLE t2(id INT);\nINSERT INTO t2 VALUES (1),(2),(3);\nCREATE TABLE t3(id INT);\nINSERT INTO t3 VALUES (1),(2),(3);"}
{"instruction": "Update data in snowflake using stored procedures?", "input": "", "output": "CREATE OR REPLACE FUNCTION update_data(IN p_id INT, IN p_data VARCHAR) RETURNS VOID AS $$ BEGIN UPDATE snowflake SET data = p_data WHERE id = p_id; END; $$ LANGUAGE plpgsql;\nCREATE OR REPLACE PROCEDURE update_data(IN p_id INT, IN p_data VARCHAR) AS $$ BEGIN EXECUTE 'update snowflake set data = ? where id = ?'; END; $$ LANGUAGE plpgsql;"}
{"instruction": "Add new column to existing table?", "input": "Table: [1, 2, 3]", "output": "Table: [1, 2, 3, 4]"}
{"instruction": "Select * from abc where x=5?", "input": "", "output": "*"}
{"instruction": "Create a function that accepts 2 parameters and returns a value of type int, name it 'add', code it as follows: create or replace function add(p1 integer, p2 integer) returns integer as $$ declare result integer; begin select sum(p1 + p2) into result from dual; return result; end; $$ language plpgsql;", "input": "", "output": "create or replace function add(p1 integer, p2 integer) returns integer as $$ declare result integer; begin select sum(p1 + p2) into result from dual; return result; end; $$ language plpgsql;"}
{"instruction": "Grant a role to another user?", "input": "", "output": "def grantRole(self, user, role):\n    if not self.isUserAdmin():\n        print(\"You are not admin\")\n    return\n    if not user in self.users:\n        print(\"User does not exist\")\n    return\n    if not role in self.roles:\n        print(\"Role does not exist\")\n    return\n    self.users[user] = role\n    self.save()"}
{"instruction": "Grant insert, update and delete on warehouse to snow role?", "input": "", "output": "Yes"}
{"instruction": "Give read only access to warehouse for snow role?", "input": "", "output": "class Warehouse(object):\n    def __init__(self, warehouse_id):\n    self.warehouse_id = warehouse_id\n    @property"}
{"instruction": "Remove snow role from dbname?", "input": "", "output": "dbname -snow"}
{"instruction": "Show the schema for a table in snowflake?", "input": "", "output": "CREATE TABLE `snowflake` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;"}
{"instruction": "What is my current database context?", "input": "", "output": "class Solution(object):\n   def getCurrentDatabaseContext():\n   return Database.get_current_context()"}
{"instruction": "List all tables in your current database context?", "input": "", "output": "SELECT * FROM INFORMATION_SCHEMA.TABLES;"}
{"instruction": "Show all tables from another database?", "input": "Database: testdb", "output": "+----------------+ | Tables_in_testdb | +----------------+ | articles | | comments | | users | +----------------+ 3 rows in set (0.00 sec)"}
{"instruction": "Show all tables from another database?", "input": "", "output": "show tables;"}
{"instruction": "List the current users?", "input": "", "output": "def getCurrentUsers():\n    users = []\n    for user in User.objects.all():\n        users.append(user)\n    return users"}
{"instruction": "How do i add an index to a table?", "input": "", "output": "class Solution(object):\n    def addIndexToTable(self, table):\n    for i in range(len(table)):\n        table[i] = table[i] + 1\n    return table"}
{"instruction": "What tables are in the current database?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`user_id` int(11) DEFAULT NULL,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`),\nKEY `fk_user_id` (`user_id`),\nCONSTRAINT `fk_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Create a new user called testuser?", "input": "", "output": "user = User(name='testuser', email='test@example.com')"}
{"instruction": "Alter user testuser with password 'testpass'?", "input": "", "output": "alter user testuser with password 'testpass';"}
{"instruction": "Insert a new row in snowflake?", "input": "[1, 2, 3, 4]", "output": "[[1, 2, 3, 4], [5, 6, 7, 8]]"}
{"instruction": "Insert a new row in snowflake?", "input": "[1, 2, 3]", "output": "[[1, 2, 3], [4, 5, 6]]"}
{"instruction": "Alter table warehouse add constraint fk1 foreign key (warehouse_id) references warehouse(id)?", "input": "", "output": "alter table warehouse add constraint fk1 foreign key (warehouse_id) references warehouse(id);"}
{"instruction": "Alter table warehouse drop constraint fk1?", "input": "Table: warehouse\nDrop Constraint: fk1", "output": "alter table warehouse drop constraint fk1;"}
{"instruction": "Create view warehouse as select warehouse_id, name, address from warehouse?", "input": "", "output": "CREATE VIEW warehouse AS SELECT warehouse_id, name, address FROM warehouse;"}
{"instruction": "Can you create a function that returns the sum of col1,col2 in a snowflake database?", "input": "snowflake = [[1, 2], [2, 3], [3, 4]]", "output": "6"}
{"instruction": "Can you create a function that returns the sum of col1,col2 in a snowflake database?", "input": "snowflake = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]", "output": "15"}
{"instruction": "Can you update a column with varchar(50) data type?", "input": "", "output": "class Solution(object):\n   def updateColumn(self, tableName, columnName, value):\n    self.cursor.execute(\"\"\"UPDATE \"\"\" + tableName + \"\" SET \"\"\" + columnName + \" = '\" + value + \"' WHERE id = 1\"\"\" )"}
{"instruction": "Create database abc in mysql?", "input": "", "output": "CREATE DATABASE abc;"}
{"instruction": "List users in mysql?", "input": "", "output": "SELECT * FROM users;"}
{"instruction": "Show all schemas in snowflake?", "input": "", "output": "Schema(name='snowflake', description='A snowflake schema is a type of star schema in which data is normalized to the third normal form. It is also known as a 3NF schema.', table_columns=[Column('id', Integer, primary_key=True), Column('name', String(50)), Column('description', String(100))])"}
{"instruction": "Count rows in table in snowflake?", "input": "", "output": "def countRows(table):\n    rows = 0\n    for i in range(1, table.size()+1):\n        if table[i] != table[i-1]:\n           rows += 1\n    return rows"}
{"instruction": "Describe schema for table sales?", "input": "", "output": "CREATE TABLE sales (\nid INTEGER PRIMARY KEY,\nproduct_name TEXT NOT NULL,\nprice DECIMAL(10,2) NOT NULL,\nquantity INTEGER NOT NULL,\nUNIQUE (product_name));"}
{"instruction": "Show me all columns for table sales?", "input": "", "output": "CREATE TABLE sales (\nid INT NOT NULL PRIMARY KEY,\nproduct_name VARCHAR(50) NOT NULL,\nprice DECIMAL(10,2) NOT NULL,\nquantity INT NOT NULL,\ncreated_at DATETIME NOT NULL,\nupdated_at DATETIME NOT NULL\n);"}
{"instruction": "How can i get a list of all schemas and tables in my database?", "input": "", "output": "import pymysql\nconn = pymysql.connect(host='localhost', user='root', passwd='password', db='test')\ncur = conn.cursor()\ncur.execute('show tables;')\nfor row in cur.fetchall():\nprint(row)"}
{"instruction": "Show the structure of table xyz?", "input": "", "output": "table xyz {\nkey1: value1, key2: value2, key3: value3}"}
{"instruction": "Create a trigger on abc to update another table when data changes?", "input": "", "output": "CREATE TRIGGER abc_update_xyz ON abc FOR UPDATE AS\nUPDATE xyz SET data = NEW.data FROM ABC WHERE ABC.id = xyz.abc_id;"}
{"instruction": "Create a new view that selects from warehouse_logs and add it to my schema?", "input": "", "output": "CREATE VIEW warehouse_logs_new AS SELECT * FROM warehouse_logs;"}
{"instruction": "How to get rid of a pesky column called \"xxx\" from table abc?", "input": "", "output": "ALTER TABLE abc DROP COLUMN xxx;"}
{"instruction": "List all the databases?", "input": "", "output": "- DB1\n- DB2"}
{"instruction": "Insert into a table in another database on the same server?", "input": "", "output": "CREATE TABLE `table_name` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nINSERT INTO `table_name` (`id`, `name`) VALUES (1,'John'), (2,'Mary'), (3,'Jane');"}
{"instruction": "Insert into warehouse values (1,'delhi')?", "input": "", "output": "INSERT INTO warehouse VALUES (1,'delhi')"}
{"instruction": "Update warehouse set location='new delhi' where id=2?", "input": "", "output": "UPDATE warehouse SET location='new delhi' WHERE id=2"}
{"instruction": "Describe table_name of database_name?", "input": "", "output": "describe table_name;"}
{"instruction": "Select * from table_name where column_name=value?", "input": "Select * from table_name where column_name=value?", "output": "id, name, age, gender, address, email, phone"}
{"instruction": "Drop table_name if exists?", "input": "", "output": "DROP TABLE IF EXISTS table_name;"}
{"instruction": "Alter table_name add column_name varchar(255) not null?", "input": "", "output": "alter table table_name add column column_name varchar(255) not null"}
{"instruction": "Create a view on top of a table in snowflake?", "input": "", "output": "CREATE OR REPLACE VIEW v_test AS SELECT * FROM test;"}
{"instruction": "Alter database xyz add column name varchar(20)?", "input": "", "output": "alter table xyz add column name varchar(20);"}
{"instruction": "Alter database xyz drop column columname?", "input": "", "output": "alter table xyz drop column columname"}
{"instruction": "Describe table column of user_name and show the values of each column?", "input": "", "output": "user_name | age | gender | country\nGeorge Washington | 55 | Male | United States\nConfucius | 54 | Male | China\nMichelangelo | 53 | Male | Italy\nYoshua Bengio | 52 | Male | Canada\nGeoffrey Hinton | 51 | Male | Canada\nMichael Jordan | 50 | Male | United States"}
{"instruction": "What are the data types of columns user_id, user_name and email?", "input": "", "output": "user_id - integer, user_name - string, email - string"}
{"instruction": "Create view with name, description and owner in snowflake?", "input": "", "output": "class View(object):\n    def __init__(self, name, description, owner):\n    self.name = name"}
{"instruction": "Revoke privileges on view from user1@localhost?", "input": "", "output": "Revoke privileges on view from user1@localhost"}
{"instruction": "What is the name of the schema that owns table my_table?", "input": "", "output": "my_schema"}
{"instruction": "List all views for schema owned by username ?", "input": "", "output": "CREATE VIEW [schema_name].view_name AS SELECT * FROM schema_name.table_name WHERE ...\nCREATE VIEW [schema_name].view_name AS SELECT ... FROM (SELECT ...) t1, (SELECT ...) t2, ...\nCREATE VIEW [schema_name].view_name AS SELECT ... FROM (SELECT ...) t1 INNER JOIN (SELECT ...) t2 ON t1.id = t2.id"}
{"instruction": "List all tables and their schemas owned by username?", "input": "", "output": "tables = [table for table in db.get_all_tables() if table.schema == 'public']\noutput = ['%s' % table.name for table in tables]\nprint(output)"}
{"instruction": "Get information about table my_table?", "input": "", "output": "Table my_table has 3 columns and 4 rows. Columns are id, name, age. Rows are (1, John, 20), (2, Jane, 30), (3, Mark, 40)."}
{"instruction": "Create user test with password abc123?", "input": "", "output": "Username: abc123?\nPassword: abc123?\nLogin Successful."}
{"instruction": "Grant select on t1 to user test?", "input": "", "output": "GRANT SELECT ON t1 TO test;"}
{"instruction": "Create function fn_test(int) returns varchar(50)?", "input": "", "output": "def fn_test(int):\n    return \"Hello World\""}
{"instruction": "Describe the function fn_test?", "input": "", "output": "def fn_test(n):\n    if n == 0:\n    return True\n    elif n % 2 == 0:\n    return False\n    else:\n    return fn_test(n-1) + fn_test(n-2)"}
{"instruction": "Drop view from snowflake.view1", "input": "snowflake.view1.drop_view('v1')", "output": "DROP VIEW v1;"}
{"instruction": "Create a new schema and move all tables to it?", "input": "", "output": "CREATE SCHEMA schema_name;\nALTER TABLE table_name1 MOVE TO schema_name;\nALTER TABLE table_name2 MOVE TO schema_name;\n..."}
{"instruction": "Create a function that returns the sum of a column?", "input": "[1, 2, 3]", "output": "6"}
{"instruction": "Create a function that returns the sum of a column?", "input": "[1, 2, 3, 4, 5]", "output": "15"}
{"instruction": "Connect as user jdoe@localhost/test_db?", "input": "", "output": "jdoe@localhost/test_db? Connected."}
{"instruction": "Drop the database xyz?", "input": "", "output": "DROP DATABASE xyz;"}
{"instruction": "Alter the primary key of abc to be an identity column and add another constraint called bcd that requires all values to be between 10 and 20?", "input": "", "output": "ALTER TABLE abc ADD CONSTRAINT bcd CHECK (bcd BETWEEN 10 AND 20);"}
{"instruction": "Alter the schema name of xyz to be yzd?", "input": "xyz", "output": "yzd"}
{"instruction": "Alter the schema name of xyz to be yzd?", "input": "abc", "output": "abd"}
{"instruction": "Grant select, insert, update and delete privilege on schema zzz to user abc?", "input": "", "output": "GRANT SELECT, INSERT, UPDATE, DELETE ON SCHEMA zzz TO abc;"}
{"instruction": "Backup an existing warehouse in snowflake?", "input": "", "output": "class Solution(object):\n    def backupWarehouse(self, warehouse):\n        self.backupFile(\"warehouse_\" + warehouse)"}
{"instruction": "Grant access to mysql database for a user?", "input": "", "output": "GRANT ALL PRIVILEGES ON *.* TO 'user'@'localhost' IDENTIFIED BY 'password';"}
{"instruction": "What is the table definition of employee?", "input": "", "output": "employee(id, name, salary)"}
{"instruction": "Show current user and host in mysql?", "input": "", "output": "show variables like 'user'"}
{"instruction": "List columns from tbl_name in mysql?", "input": "", "output": "SELECT * FROM tbl_name;"}
{"instruction": "Describe privileges for user on database?", "input": "", "output": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON *.* TO 'user'@'localhost';\nREVOKE ALL PRIVILEGES ON *.* FROM 'user'@'localhost';"}
{"instruction": "Grant select,insert on my_table to bob@localhost?", "input": "", "output": "GRANT SELECT, INSERT ON my_table TO bob@localhost"}
{"instruction": "Grant all on table to user3? 10.grant select on view to user3? 11.grant select on function to user3? 12.grant select on procedure to user3? 13.grant select on extended procedure to user3? 14.grant select on warehouse to user3? 15.grant insert,update,delete on table to user3?", "input": "", "output": "1.GRANT SELECT ON VIEW TO USER3?\n2.GRANT SELECT ON FUNCTION TO USER3?\n3.GRANT SELECT ON PROCEDURE TO USER3?\n4.GRANT SELECT ON EXTENDED PROCEDURE TO USER3?\n5.GRANT INSERT,UPDATE,DELETE ON TABLE TO USER3?"}
{"instruction": "Show columns of table tbl1 in schema s?", "input": "", "output": "s.tbl1"}
{"instruction": "Alter table my_table add column2 int;", "input": "", "output": "ALTER TABLE my_table ADD COLUMN2 INT;"}
{"instruction": "Alter table my_table rename to new_my_table;", "input": "", "output": "ALTER TABLE my_table RENAME TO new_my_table;"}
{"instruction": "Create a stored procedure called sp_add_user in snowflake db?", "input": "", "output": "CREATE PROCEDURE sp_add_user(name varchar(50), email varchar(50)) BEGIN INSERT INTO users (name, email) VALUES (name, email); END;"}
{"instruction": "Drop a function in snowflake?", "input": "", "output": "def snowflake():\n    return \"snowflake\""}
{"instruction": "Create table xxx in schema yyy with column zzz and constraint ccc?", "input": "", "output": "CREATE TABLE xxx ("}
{"instruction": "Alter table xxx to add constraint ffff?", "input": "", "output": "ALTER TABLE xxx ADD CONSTRAINT ffff FOREIGN KEY (f) REFERENCES yyyy(g);"}
{"instruction": "List all users with a salary > 100k?", "input": "", "output": "[{'name': 'John Doe', 'salary': 100000}, {'name': 'Jane Doe', 'salary': 200000}]"}
{"instruction": "Show all tables for user dbuser1?", "input": "", "output": "dbuser1=> \\dt+\nList of relations\nSchema | Name | Type | Owner\npublic | account_history | table | dbuser1\npublic | accounts | table | dbuser1\npublic | bank_accounts | table | dbuser1\npublic | credit_cards | table | dbuser1\npublic | customers | table | dbuser1\npublic | employees | table | dbuser1\npublic | orders | table | dbuser1\npublic | payments | table | dbuser1\npublic | products | table | dbuser1\npublic | transactions | table | dbuser1\npublic | users | table | dbuser1"}
{"instruction": "Create a new role named testrole with dba privilege?", "input": "", "output": "CREATE ROLE testrole WITH CREATEDB;"}
{"instruction": "How can i delete an oracle instance?", "input": "", "output": "You can use the following command to delete an Oracle instance.\nRMAN> shutdown immediate;\nRMAN> startup nomount;\nRMAN> alter database delete failed instance;\nRMAN> alter database open resetlogs;"}
{"instruction": "How can i create a database link between two databases?", "input": "", "output": "CREATE DATABASE LINK [link_name] CONNECT TO [user_name] IDENTIFIED BY '[password]' ON [source_database].[server];"}
{"instruction": "How can i create a database link between two databases?", "input": "", "output": "Database link name: myLink\nSource database: db1.example.com\nTarget database: db2.example.com\nUser name: user1\nPassword: password1"}
{"instruction": "List all links available on your database?", "input": "", "output": "SELECT * FROM links;"}
{"instruction": "Describe the link name_of_link?", "input": "", "output": "- The link name_of_link? is a question mark.\n- The link name_of_link? is a hyperlink.\n- The link name_of_link? is a broken link."}
{"instruction": "Revoke insert, update and delete on warehouse from jane?", "input": "", "output": "Revoke insert, update and delete on warehouse from jane?\nRevoke insert, update and delete on warehouse from jane? (y/n) y"}
{"instruction": "What is the schema of view v1?", "input": "", "output": "v1 has the following schema: { \"name\": String, \"age\": Int }"}
{"instruction": "Connect to sql server", "input": "", "output": "import sqlite3 as lite\nconn = lite.connect('sqlite_db')"}
{"instruction": "Give access to user test to execute stored procedures in database snowflake?", "input": "", "output": "CREATE USER test WITH PASSWORD 'test';\nGRANT EXECUTE ON snowflake.* TO test;"}
{"instruction": "Alter table employee add column (id number, name varchar2(50))?", "input": "", "output": "alter table employee add (id number, name varchar2(50));"}
{"instruction": "Create a table with columns id and name of type integer and varchar respectively?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Restore data from snowflake to mysql?", "input": "", "output": "import mysql.connector as connector\nconn = connector.connect(user='root', password='123456', host='localhost')\ncur = conn.cursor()\ncur.execute('SELECT * FROM snowflake')\nfor row in cur:\nprint(row)\nconn.close()"}
{"instruction": "Create an alias for a column in snowflake?", "input": "Column: age\nAlias: age_at_time_of_death", "output": "age_at_time_of_death, date_of_birth"}
{"instruction": "Create an alias for a column in snowflake?", "input": "Column: name\nAlias: first_name", "output": "first_name, last_name"}
{"instruction": "What is the schema name of this database?", "input": "", "output": "schema_name"}
{"instruction": "What is the total size of all tables in this database?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`user_id` int(11) DEFAULT NULL,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`),\nKEY `user_id` (`user_id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `comments` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`post_id` int(11) DEFAULT NULL,\n`comment` text,\nPRIMARY KEY (`id`),\nKEY `post_id` (`post_id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Delete data in snowflake?", "input": "{1, 2, 3, 4, 5}", "output": "{1, 2, 3, 4}"}
{"instruction": "Delete data in snowflake?", "input": "{1, 2, 3}", "output": "{2, 3}"}
{"instruction": "How do i get out of this role?", "input": "", "output": "Hi [Manager],\nI\u2019m writing to you because I\u2019ve decided that it\u2019s time for me to move on from my current role. I\u2019ve been thinking about this decision for a while, and have come to the conclusion that I need to take some time off to focus on myself.\nI\u2019ve really enjoyed working with you over the past few years, and hope we can stay in touch. I\u2019ll be sure to follow up with you once I\u2019ve had some time to reflect on what I want to do next.\nThank you again for everything you\u2019ve done for me.\nBest,\n[Your Name]"}
{"instruction": "Describe table and all its columns in snowflake?", "input": "", "output": "Table name: \"snowflake\"\nColumn names: \"id\", \"name\", \"age\", \"gender\", \"address\", \"city\", \"state\", \"zipcode\", \"country\"\nColumn types: integer, string, integer, string, string, string, string, string, string"}
{"instruction": "Create a new user in the database with username abc and password xyz?", "input": "", "output": "CREATE USER abc WITH PASSWORD 'xyz';"}
{"instruction": "Drop table in schema xxx of warehouse yyy?", "input": "", "output": "DROP TABLE IF EXISTS xxx.yyy"}
{"instruction": "Alter table xxx add column zzz?", "input": "", "output": "alter table xxx add column zzz;"}
{"instruction": "Create a table with the following columns and data types: create table `employee` (", "input": "`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\n`age` int(11) DEFAULT NULL,\n`gender` enum('male', 'female') DEFAULT NULL,\n`salary` decimal(10,2) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB;", "output": "CREATE TABLE `employee` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\n`age` int(11) DEFAULT NULL,\n`gender` enum('male', 'female') DEFAULT NULL,\n`salary` decimal(10,2) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"instruction": "Insert into employee values ('raj', 'software engineer', '1234');", "input": "", "output": "INSERT INTO employee VALUES ('raj', 'software engineer', '1234');"}
{"instruction": "Alter table abc rename to def?", "input": "", "output": "ALTER TABLE abc RENAME TO def;"}
{"instruction": "List all views i own?", "input": "", "output": "class View(models.Model):\n    class Meta:\n    def __str__(self):\n    return self.name"}
{"instruction": "Create a new view that shows only columns a,b,c and d from table1?", "input": "Table1: id, name, age, gender, city", "output": "id, name, age, gender, city"}
{"instruction": "Create a function to count number of records in table1 with last name = 'smith'?", "input": "", "output": "def countSmith(table1):\n    count = 0\n    for row in table1:\n       if row['last_name'] == 'smith':\n        count += 1\n    return count"}
{"instruction": "Create a procedure to update column x for rows where column y > 10 ?", "input": "", "output": "def update(x, y):\n    if y > 10:\n    x[y] = x[y] + 1\n    return x"}
{"instruction": "Backup the entire database (including metadata)?", "input": "", "output": "class Solution(object):\n    def backupDatabase(self, db):\n        self.backupMetadata()"}
{"instruction": "Create an index on t1(a,b) ?", "input": "", "output": "CREATE INDEX t1_a ON t1(a,b);"}
{"instruction": "Create a user 'myuser' with password 'mypassword'?", "input": "", "output": "import os\nos.system('echo \"useradd myuser -p mypassword\" | sudo tee /etc/adduser.conf')"}
{"instruction": "Describe all databases on the localhost?", "input": "", "output": "localhost - MySQL, PostgreSQL, MongoDB, Redis, Memcached, RabbitMQ, CouchDB, Elasticsearch, Solr, Cassandra, Hadoop, Spark, Kafka, Zookeeper."}
{"instruction": "Create a database called test_db?", "input": "", "output": "CREATE DATABASE test_db;"}
{"instruction": "Create a table in mysql named tbl1(col1 int, col2 varchar)", "input": "", "output": "CREATE TABLE tbl1 (col1 int, col2 varchar)"}
{"instruction": "Select * from tbl1", "input": "", "output": "*"}
{"instruction": "Describe a table called testtable in snowflake database?", "input": "", "output": "CREATE TABLE testtable (id INT, name VARCHAR(20));"}
{"instruction": "Create view vw_test as select 1,2,3;", "input": "", "output": "vw_test.py(1,0)\ndef test():\n    return 1,2,3"}
{"instruction": "Describe the column called id in table foo", "input": "", "output": "id - The unique identifier for each row."}
{"instruction": "Create a view from table bar with name baz", "input": "", "output": "CREATE VIEW baz AS SELECT * FROM foo;"}
{"instruction": "Create table t1 (t2 int, t3 int) in snowflake?", "input": "", "output": "CREATE TABLE t1 (t2 int, t3 int);\nCREATE INDEX i1 ON t1(t2);\nCREATE INDEX i2 ON t1(t3);"}
{"instruction": "Alter table t1 add column c1 varchar(20)?", "input": "", "output": "alter table t1 add column c1 varchar(20)"}
{"instruction": "Describe users from snowflake?", "input": "", "output": "- Male, age 25\u201335, interested in technology and startups.\n- Female, age 35\u201345, interested in fashion and beauty.\n- Male, age 45\u201355, interested in sports and fitness.\n- Female, age 55+, interested in health and wellness."}
{"instruction": "Create function fnc_xyz() returns integer as begin return x+y; end", "input": "fnc_xyz(2, 4) = 6", "output": "False"}
{"instruction": "Create function fnc_xyz() returns integer as begin return x+y; end", "input": "fnc_xyz(1, 2) = 3", "output": "True"}
{"instruction": "Show grants for user 'myuser' on db 'mydb'?", "input": "", "output": "grants for myuser@'%' identified by 'mypass' on db_name;"}
{"instruction": "Select * from mytable;", "input": "", "output": "*"}
{"instruction": "Grant all on mydb.* to 'user'@'localhost';", "input": "", "output": "GRANT ALL ON mydb.* TO 'user'@'localhost';"}
{"instruction": "Alter table abc add column def?", "input": "", "output": "alter table abc add column def as (select * from abc);"}
{"instruction": "Select * from a_snowflake_table where col1=12345?", "input": "", "output": "*"}
{"instruction": "Alter column abc type varchar(100)?", "input": "", "output": "alter table abc type varchar(100)"}
{"instruction": "Revoke insert on table abc?", "input": "", "output": "Revoke insert on table abc?\nRevoke insert on table abc? (y/n) y\nTable \"abc\".\"def\" has been revoked."}
{"instruction": "Create a table called testdb with id,name columns and insert some data into it?", "input": "", "output": "CREATE TABLE testdb (id INT, name VARCHAR(20));\nINSERT INTO testdb VALUES (1,'John'),(2,'Mary'),(3,'Jane');\nSELECT * FROM testdb;"}
{"instruction": "Drop the table you created above?", "input": "", "output": "DROP TABLE IF EXISTS table_name;"}
{"instruction": "Backup the database you have just created?", "input": "", "output": "import os\nimport shutil\nbackup_dir = '/home/user/my_database'\ndb_file = './my_database.sqlite3'\n\nos.chdir(backup_dir)\nshutil.copy2(db_file, './my_database.bak')"}
{"instruction": "Create a trigger on table1 for insert and update events?", "input": "", "output": "CREATE TRIGGER trigger1 ON table1 FOR INSERT, UPDATE AS"}
{"instruction": "Which users are currently logged in?", "input": "", "output": "[{'id': 1, 'name': 'John Doe', 'email': 'john.doe@example.com'}, {'id': 2, 'name': 'Jane Doe', 'email': 'jane.doe@example.com'}]"}
{"instruction": "Which tables have triggers?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`user_id` int(11) DEFAULT NULL,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`),\nKEY `user_id` (`user_id`),\nCONSTRAINT `fk_posts_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\nCONSTRAINT `fk_posts_users_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE SET NULL,\nCONSTRAINT `fk_posts_posts` FOREIGN KEY (`id`) REFERENCES `posts` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Grant select on snowflake.* to dba_users?", "input": "", "output": "GRANT SELECT ON snowflake.* TO dba_users"}
{"instruction": "Create function get_name() returns varchar(50) begin return 'snowflake'; end;", "input": "", "output": "create function get_name() returns varchar(50) begin return 'snowflake'; end;"}
{"instruction": "Create procedure set_password(pwd varchar(100)) begin update users set password= pwd where username = 'dba_user'; end;", "input": "", "output": "CREATE PROCEDURE set_password(pwd varchar(100)) BEGIN UPDATE users SET password= pwd WHERE username='dba_user'; END;"}
{"instruction": "Delete warehouse from snowflake?", "input": "", "output": "warehouse"}
{"instruction": "Create an external table to query the data from snowflake using \"odbc\"?", "input": "", "output": "CREATE EXTERNAL TABLE snowflake (\nyear INT,\nmonth INT,\nday INT,\nsnow_depth INT)"}
{"instruction": "Import/export data from/to snowflake?", "input": "", "output": "import snowflake\nsnow.create_table('users', Field('name', 'varchar(50)') )\nsnow.load_table('users', 'user_data.csv')\nsnow.dump_table('users', 'user_data.csv')"}
{"instruction": "Create and use schema with ddl scripts?", "input": "Schema: CREATE TABLE users ( id SERIAL PRIMARY KEY, name TEXT NOT NULL );", "output": "CREATE TABLE users ( id SERIAL PRIMARY KEY, name TEXT NOT NULL )"}
{"instruction": "Create and use schema with ddl scripts?", "input": "Schema: CREATE TABLE users ( id SERIAL PRIMARY KEY, name TEXT NOT NULL, email TEXT NOT NULL );", "output": "CREATE TABLE users ( id SERIAL PRIMARY KEY, name TEXT NOT NULL, email TEXT NOT NULL )"}
{"instruction": "What is star schema? how does it help for analytical queries?", "input": "", "output": "Fact Table: Orders\nDimension Tables: Order Date, Product, Customer"}
{"instruction": "What is star schema? how does it help for analytical queries?", "input": "", "output": "Star schema is a type of data warehouse schema that consists of a fact table surrounded by multiple dimension tables. The fact table contains the measures or facts about the business, and the dimensions contain the attributes needed to describe the facts."}
{"instruction": "What is star schema? how does it help for analytical queries?", "input": "", "output": "Fact Table: Sales\nDimension Tables: Product, Customer, Time"}
{"instruction": "List all tables in the warehouse called abc", "input": "", "output": "abc.employee, abc.product, abc.order, abc.customer"}
{"instruction": "Describe table bar in schema baz", "input": "", "output": "Table bar is a table that contains the following columns: id, name, and type. The id column is an auto-incrementing primary key. The name column is a varchar(255) column. The type column is a varchar(10) column."}
{"instruction": "List columns of table zyx in database db2", "input": "", "output": "db2=> select * from zyx;\n+-----+-------+------+\n| id | name | age |\n+-----+-------+------+\n| 1 | John | 30 |\n| 2 | Jane | 25 |\n| 3 | Mary | 20 |\n| 4 | Jack | 10 |\n| 5 | Jill | 15 |\n| 6 | James | 40 |\n| 7 | Mark | 35 |\n| 8 | Sarah | 45 |\n| 9 | Bill | 50 |\n| 10 | Tom | 60 |\n| 11 | Ann | 55 |\n| 12 | David | 70 |\n| 13 | Peter | 80 |\n| 14 | Paul | 90 |\n| 15 | George | 100 |\n| 16 | Sam | 120 |"}
{"instruction": "List all indexes on table xyz in warehouse abc", "input": "", "output": "def listIndexes(table, warehouse):\n    indexes = []\n    for i in range(len(warehouse)):\n        if table[i] == 'xyz':\n        \t indexes.append(i)\n    return indexes"}
{"instruction": "Show the column names of mytable in snowflake?", "input": "", "output": "snowflake=> \\d mytable\nTable \"mytable\"\nColumn | Type | Modifiers\n----+---------+-----------------------------------------------------\nid | integer | not null default nextval('mytable_id_seq'::regclass)\nname | character varying(255) |\nage | integer |"}
{"instruction": "Create an index on myindex in snowflake?", "input": "", "output": "CREATE INDEX ON myindex (mycolumn)"}
{"instruction": "What is the table name for my data?", "input": "Data: [\"a\", \"b\", \"c\"]", "output": "my_data"}
{"instruction": "What is the table name for my data?", "input": "Data: [1, 2, 3]", "output": "my_data"}
{"instruction": "Describe table in my system?", "input": "", "output": "Table name: users\nColumns: id, first_name, last_name, email, phone_number, address, city, state, zip_code, country_id\nData type: integer, string, string, string, string, string, string, string, integer, integer\nPrimary key: id\nForeign keys: country_id (references countries)\nIndexes: \n- unique(email)"}
{"instruction": "Create user with name = 'bob' and password = '123456' in my system?", "input": "", "output": "def createUser(name, password):\n    user = User()\n    user.name = name\n \n    user.password = password\n \n    db.addUser(user)"}
{"instruction": "Grant select privilege on table \"test\" to bob@my-system.com?", "input": "", "output": "GRANT SELECT ON test TO bob@my-system.com"}
{"instruction": "What are the tables and columns of table1?", "input": "Table: Table1 = [[1, 2], [3, 4]]", "output": "Columns: [0, 0]\nRows: [1, 2]"}
{"instruction": "Show me all users in roles where role = 'snowflake'", "input": "", "output": "snowflake"}
{"instruction": "Alter the data type of the column?", "input": "Column: name, age, gender, city", "output": "name, age, gender, city"}
{"instruction": "What are all constraints on the table?", "input": "Table:\nName Age Gender Height Weight\nJohn 30 Male 180 70\nMary 25 Female 160 50", "output": "Gender, Height, Weight"}
{"instruction": "Drop a constraint from the table?", "input": "Table:\nName | Age | Height (cm)\nJohn | 30 | 170\nMary | 25 | 160", "output": "John, Mary"}
{"instruction": "How do i change password for xyz?", "input": "", "output": "You need to change your password for xyz. To do this, please go to the following link: https://xyz.com/change_password.html"}
{"instruction": "Drop an index on i_table7?", "input": "", "output": "ALTER TABLE i_table7 DROP INDEX i_table7_i"}
{"instruction": "Delete the table8 from the database9?", "input": "", "output": "DELETE FROM table8 WHERE id = 8;"}
{"instruction": "What is the largest number of columns allowed in a columnar db?", "input": "", "output": "Columnar databases are designed to store data in a column-oriented fashion. This means that the data is stored in columns, rather than rows. The number of columns allowed in a columnar database depends on the type of columnar database being used. For example, Apache Arrow supports up to 16 columns per record."}
{"instruction": "Drop table16 from schema17?", "input": "", "output": "DROP TABLE schema17.table16;"}
{"instruction": "Alter view vwxyz as select * from warehouse wxyz where x=1 and y=2?", "input": "", "output": "select * from warehouse wxyz where x=1 and y=2"}
{"instruction": "Grant select on schema dba to user bbbb?", "input": "", "output": "GRANT SELECT ON SCHEMA dba TO USER bbbb"}
{"instruction": "Grant insert, update, delete on table abc to user cccc?", "input": "", "output": "GRANT INSERT, UPDATE, DELETE ON table abc TO user cccc"}
{"instruction": "Give me a list of employees in dept 10?", "input": "", "output": "[{'name': 'John', 'age': 25, 'dept': 10}, {'name': 'Jane', 'age': 30, 'dept': 10}]"}
{"instruction": "Give me a list of all departments with their names and number of employees?", "input": "", "output": "List: Engineering, 10; Sales, 20; Marketing, 30; HR, 40"}
{"instruction": "What is the max salary for an employee in snowflake?", "input": "", "output": "class Solution(object):\n   def maxSalary(self, employee):\n   return self.maxValue() - employee.value"}
{"instruction": "How many records are there in each department?", "input": "Department: Sales, Marketing, Engineering, Support, IT", "output": "5"}
{"instruction": "How many records are there in each department?", "input": "Department: Sales, Marketing, Engineering, Support", "output": "4"}
{"instruction": "List all schemas in snowflake? 10.list tables and columns for a given schema in snowflake? 11.list all views in snowflake? 12.list extended procedures in snowflake? 13.list all functions in snowflake? 14.list all stored procedures in snowflake? 15.list all data types in snowflake?", "input": "", "output": "1. List all schemas in snowflake?\nselect * from dba_schemas;\n2. 10.list tables and columns for a given schema in snowflake?\nselect table_name, column_name, data_type from dba_tables where table_name = 'EMP';\n3. 11.list all views in snowflake?\nselect view_name, owner from dba_views;\n4. 12.list extended procedures in snowflake?\nselect object_name, owner from dba_extended_procedures;\n5. 13.list all functions in snowflake?\nselect object_name, owner from dba_functions;\n6. 14.list all stored procedures in snowflake?\nselect object_name, owner from dba_stored_procedures;\n7. 15.list all data types in snowflake?\nselect datatype, length from dba_data_types;"}
{"instruction": "Create a table with 2 columns and a primary key?", "input": "", "output": "CREATE TABLE `table1` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "Create a database with name testdb in oracle?", "input": "", "output": "CREATE DATABASE testdb;"}
{"instruction": "List all schemas in oracle?", "input": "List all schemas in oracle:\nSQL> select * from user_schemas;", "output": "USER_SCHEMAS ------------\nDBSNMP\nEXAMPLE\nPUBLIC\nSYSTEM\nXDB"}
{"instruction": "List all schemas in oracle?", "input": "List all tables in dbsnmp schema:\nSQL> select * from user_tables where table_name = 'TEST';", "output": "TABLE_NAME ------------------------------ TEST"}
{"instruction": "List all schemas in oracle?", "input": "List all tables in public schema:\nSQL> select * from user_tables where table_name = 'TEST';", "output": "TABLE_NAME ------------------------------ TEST"}
{"instruction": "List all schemas in oracle?", "input": "", "output": "Schemas in Oracle are logical containers for tables, views, indexes, clusters, synonyms, sequences, and packages. A schema is a named collection of objects that can be accessed by users through SQL statements. The owner of a schema has complete control over the schema objects."}
{"instruction": "Describe the table named employees.", "input": "", "output": "employees(id, name, age)"}
{"instruction": "What fields do i have in the table named employees?", "input": "", "output": "id, name, salary, department_id"}
{"instruction": "Drop table named employees.", "input": "", "output": "DROP TABLE employees;"}
{"instruction": "How to create a trigger in mysql?", "input": "", "output": "CREATE TRIGGER [trigger_name] BEFORE INSERT ON table_name FOR EACH ROW BEGIN\nEND;"}
{"instruction": "What is the syntax for creating an index on a column?", "input": "", "output": "CREATE INDEX index_name ON table_name (column_name);"}
{"instruction": "What does it mean if i have a foreign key constraint on a column that has no corresponding primary key in another table?", "input": "", "output": "It means that the foreign key column is not unique."}
{"instruction": "Describe columns from a table in snowflake schema?", "input": "", "output": "Columns in snowflake schema are like the branches of a tree. The root node is the table itself, and each branch represents a column. Each branch can have multiple nodes, which represent the values for that column."}
{"instruction": "Describe columns from a table in snowflake schema?", "input": "Table: Book\nColumns: id, title, author_id, publisher_id", "output": "id - Integer\ntitle - String\nauthor_id - Integer\npublisher_id - Integer"}
{"instruction": "Describe columns from a table in snowflake schema?", "input": "Table: User\nColumns: id, name, age, gender", "output": "id - Integer\nname - String\nage - Integer\ngender - String"}
{"instruction": "How do i use date and time functions in snowflake?", "input": "", "output": "import time\nnow = time.time()\nprint(now)"}
{"instruction": "What is the difference between current_timestamp, now() , sysdate etc?", "input": "", "output": "import time\nd = time.datetime.now()\nsysdate() returns the current date and time as a datetime object, but expressed in local time."}
{"instruction": "What is the difference between current_timestamp, now() , sysdate etc?", "input": "import time\nd = time.localtime()", "output": "2018-08-15 15:04:05.829000+00:00 2018-08-15 15:04:05.829000+00:00 2018-08-15 15:04:05.829000+00:00 2018-08-15 15:04:05.829000+00:00"}
{"instruction": "What is the difference between current_timestamp, now() , sysdate etc?", "input": "", "output": "import time\nprint(time.current_timestamp())\nnow() returns the current date and time as a datetime object."}
{"instruction": "What is the difference between current_timestamp, now() , sysdate etc?", "input": "", "output": "current_timestamp() returns the current timestamp in UTC. It is a read-only value that can be used to generate a timestamp in UTC for logging purposes."}
{"instruction": "Give me all columns in table with their types and lengths?", "input": "", "output": "Columns: \nName, Type, Length"}
{"instruction": "Give me all tables in database snowflake with their names and number of rows?", "input": "Rows: 10\nTable name: snowflake.snow_flakes_2\nRows: 20", "output": "Table name: snowflake.snow_flakes"}
{"instruction": "Create an index on this view?", "input": "View: CREATE VIEW v2 AS SELECT * FROM tbl WHERE a > 10;", "output": "CREATE INDEX ON v2 (a);"}
{"instruction": "Create an index on this view?", "input": "View: CREATE VIEW v1 AS SELECT * FROM tbl;", "output": "CREATE INDEX ON v1 (a, b);"}
{"instruction": "Give me a list of all indexes in this database?", "input": "", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"instruction": "Describe table with all columns in it?", "input": "", "output": "Table has 3 columns. First column is ID, second column is name and third column is age."}
{"instruction": "Show grants for user x in data warehouse?", "input": "", "output": "SELECT grants FROM user WHERE username = 'x';"}
{"instruction": "List all tables from a db_name in snowflake?", "input": "", "output": "db_name.table1, db_name.table2, ..."}
{"instruction": "Show the contents of columns from table named \"testtable\"?", "input": "", "output": "SELECT * FROM testtable;"}
{"instruction": "Revoke role from user?", "input": "", "output": "def revokeRole(user, role):\n    user.roles = set([role])"}
{"instruction": "Show me the data in my view vw_test ?", "input": "", "output": "<html>\n<head>\n</head>\n<body>\n<h1>Hello World!</h1>\n</body>\n</html>"}
{"instruction": "Create trigger on employee to update the name column when it is inserted or updated?", "input": "", "output": "CREATE TRIGGER [Employee_Name] ON [dbo].[Employee]\nAFTER INSERT, UPDATE AS\nBEGIN\nUPDATE Employee SET Name = NEW.Name WHERE EmployeeID = NEW.EmployeeID;\nEND;"}
{"instruction": "Create view with all columns from employee table?", "input": "", "output": "CREATE VIEW employee_view AS SELECT * FROM employee;"}
{"instruction": "Alter user bob set password 'mypass';", "input": "", "output": "ALTER USER 'bob'@'localhost' IDENTIFIED BY 'mypass';"}
{"instruction": "Create an index on warehouse for warehouseid, location, phone number;", "input": "", "output": "CREATE INDEX warehouse_location ON warehouse (warehouseid, location, phone number);"}
{"instruction": "Create a new table called test_table (id int primary key, name varchar(50))", "input": "", "output": "CREATE TABLE test_table (id int primary key, name varchar(50));"}
{"instruction": "Create a trigger on my_table to fire when any row is inserted or updated", "input": "", "output": "CREATE TRIGGER my_table_trigger AFTER INSERT OR UPDATE ON my_table FOR EACH ROW BEGIN\nEND;"}
{"instruction": "Which user is the owner of table \"snowflake\"?\"address\"?", "input": "", "output": "\"snowflake\".\"address\""}
{"instruction": "Are you able to see data from another database?", "input": "", "output": "Yes, I can see the data from another database.\nNo, I cannot see the data from another database."}
{"instruction": "What databases are available on this server?", "input": "", "output": "mysql, postgresql, sqlite3, mssql"}
{"instruction": "Drop a table in snowflake? 11.drop stored procedure in snowflake? 12.create new column in table xyz? 13.alter table xyz add column yyy; 14.list all columns of warehouse 15.select count(*) from warehouse", "input": "", "output": "DROP TABLE IF EXISTS warehouse; CREATE TABLE warehouse (id INT, name VARCHAR(100)); INSERT INTO warehouse VALUES (1,'apple'), (2,'orange'); ALTER TABLE warehouse ADD COLUMN color VARCHAR(10); SELECT * FROM warehouse; SELECT count(*) FROM warehouse;"}
{"instruction": "How to list all tables in a warehouse?", "input": "", "output": "def listAllTables(warehouse):\n    tables = []\n    for table in warehouse.tables:\n        tables.append(table)\n    return tables"}
{"instruction": "How to drop a table from a warehouse?", "input": "", "output": "DROP TABLE [table_name]"}
{"instruction": "How to find all the tables in snowflake?", "input": "", "output": "def find_all_tables(snowflake):\n    tables = []\n    for node in snowflake.nodes():\n    if node.type == 'table':\n        tables.append(node)\n    return tables"}
{"instruction": "How do i see the columns of a table in snowflake?", "input": "", "output": "snowflake=> \\d+ table_name\n\\d+ table_name\nColumn | Type\n-----+----------------------------\nid | integer(11)\nname | character varying(255)\nage | integer(4)\ngender | character(1)\ncity | character varying(255)\ncountry | character varying(255)"}
{"instruction": "What are all the databases i have access to in snowflake?", "input": "", "output": "db.accounts, db.customers, db.orders, db.products, db.shippers, db.users"}
{"instruction": "Show me how many records there are in table test in snowflake?", "input": "", "output": "SELECT COUNT(*) FROM test;"}
{"instruction": "Connect to mysql using my user id/password?", "input": "", "output": "import mysql.connector\nconn = mysql.connector.connect(user='[User ID]', password='[Password]')"}
{"instruction": "Grant select, insert, update, delete privileges on table test to public?", "input": "", "output": "GRANT SELECT, INSERT, UPDATE, DELETE ON test.* TO public;"}
{"instruction": "How many tables can i have in a schema?", "input": "", "output": "CREATE TABLE t1 (a int); CREATE TABLE t2 (b int); CREATE TABLE t3 (c int);"}
{"instruction": "Is there a way to see the history of changes made to a database or a table?", "input": "", "output": "Yes, you can use the following SQL command to see the history of changes made to a table."}
{"instruction": "What is data lineage in snowflake?", "input": "", "output": "Data lineage is a set of links between data elements in a database."}
{"instruction": "Drop the warehouse abc?", "input": "", "output": "abc"}
{"instruction": "Create a table with name and id column?", "input": "", "output": "name | id"}
{"instruction": "Insert some data into the newly created table?", "input": "INSERT INTO `users` (`name`, `age`, `gender`, `country_id`) VALUES ('John', 25, 'male', 1);", "output": "Query OK, 1 row affected (0.00 sec)\nRows matched: 1 Changed: 1 Warnings: 0"}
{"instruction": "Insert some data into the newly created table?", "input": "INSERT INTO `users` (`name`, `age`, `gender`, `country_id`) VALUES ('Jane', 30, 'female', 2);", "output": "Query OK, 1 row affected (0.00 sec)\nRows matched: 1 Changed: 1 Warnings: 0"}
{"instruction": "Create a table with column id int, name varchar(30) in schema public?", "input": "", "output": "CREATE TABLE `table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(30) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"}
{"instruction": "What are the privileges granted to me?", "input": "", "output": "You can create a new topic.\nYou can reply to topics.\nYou can edit your posts.\nYou can delete your own posts."}
{"instruction": "Create table with name=mydbname.snowflakedb.tbl_xyz?", "input": "", "output": "CREATE TABLE `tbl_xyz` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;"}
{"instruction": "Drop table from mydbname.snowflakedb.tbl_xyz?", "input": "", "output": "DROP TABLE mydbname.snowflakedb.tbl_xyz;"}
{"instruction": "How to connect to mysql db?", "input": "", "output": "import mysql.connector\nconn = mysql.connector.connect(user='root', password='123456', host='localhost')"}
{"instruction": "Create a view with the name \"myview\" on table \"testtable\"?", "input": "", "output": "CREATE VIEW myview AS SELECT * FROM testtable;"}
{"instruction": "Describe user \"joe\" in snowflake?", "input": "", "output": "joe is a user with the following properties:\n- name: Joe\n- email: joe@example.com\n- age: 30\n- gender: male\n- location: New York\n- occupation: Engineer\n- interests: [Programming, Football]"}
{"instruction": "Grant permission to create databases and views on testdb to joe@snowflake?", "input": "", "output": "GRANT ALL ON testdb.* TO 'joe@snowflake' IDENTIFIED BY PASSWORD '*';"}
{"instruction": "Revoke create view privilege from joe@snowflake?", "input": "", "output": "Yes"}
{"instruction": "Grant role to user on schema?", "input": "", "output": "CREATE ROLE [user_name] AUTHORIZATION [schema_name];"}
{"instruction": "Create a view named \"test\" that has two columns: id and name.", "input": "", "output": "class TestView(APIView):\n    def get(self, request, *args, **kwargs):\n    return Response({'id': 1, 'name': 'John Doe'})"}
{"instruction": "Create index on column name in table employees?", "input": "", "output": "CREATE INDEX ON employees(name);"}
{"instruction": "Create a trigger on table test that returns the number of rows inserted?", "input": "", "output": "CREATE TRIGGER test_trigger AFTER INSERT ON test FOR EACH ROW RETURN NEW.id;"}
{"instruction": "Create a view in snowflake with 3 columns and return all rows from another table?", "input": "", "output": "CREATE VIEW vw_test AS SELECT * FROM tbl;"}
{"instruction": "Insert data into two tables using different schemas?", "input": "Table1: {'name': 'John', 'age': 25}\nTable2: {'name': 'Jane', 'age': 23}", "output": "Table1: {'name': 'John', 'age': 25, 'id': 1} Table2: {'name': 'Jane', 'age': 23, 'id': 2}"}
{"instruction": "How do i find out if there is any schema named \"snowflake\"?", "input": "", "output": "import pymysql.cursors\nconn = pymysql.connect(host='localhost', user='root', password='', db='test')\ncur = conn.cursor()\ncur.execute(\"SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME LIKE 'snowflake'\")\nfor row in cur.fetchall():\nprint(row)"}
{"instruction": "What databases are available to me?", "input": "", "output": "- MySQL\n- PostgreSQL"}
{"instruction": "List all roles for user bob?", "input": "", "output": "- bob\n- admin\n- user"}
{"instruction": "Connect to db xyz using user yyyy?", "input": "", "output": "import psycopg2\nconn = psycopg2.connect(dbname='xyz', user='yyyy')"}
{"instruction": "Create a new role for user zzzz?", "input": "", "output": "CREATE ROLE zzzz WITH LOGIN PASSWORD 'password';"}
{"instruction": "Create a view with name 'vw_test' and columns (col1, col2)?", "input": "", "output": "CREATE VIEW vw_test AS SELECT col1, col2 FROM table;"}
{"instruction": "Who is the owner of the table named 'my_table'?", "input": "Table name: my_table", "output": "John"}
{"instruction": "Grant a privilege to a role in snowflake?", "input": "", "output": "grant create session to [role]"}
{"instruction": "Create a new table called test_table with id,name and age columns?", "input": "", "output": "CREATE TABLE test_table (id INT, name VARCHAR(20), age INT);"}
{"instruction": "Create a new role with same permissions as the current user?", "input": "", "output": "def createRole(self, role):\n    if self.isAdmin():\n    return True"}
{"instruction": "Insert into warehouse_tasks values ('test', 'abc');", "input": "", "output": "INSERT INTO warehouse_tasks VALUES ('test', 'abc');"}
{"instruction": "Delete from warehouse_tasks where task = 'test';", "input": "", "output": "DELETE FROM warehouse_tasks WHERE task = 'test';"}
{"instruction": "List all columns in warehouse_task_view;", "input": "", "output": "warehouse_task_view.columns"}
{"instruction": "Which departments have no employees?", "input": "Department: Sales\nEmployees: 3", "output": "(c)"}
{"instruction": "Which departments have no employees?", "input": "Department: Engineering\nEmployees: 10", "output": "(a)"}
{"instruction": "Which departments have no employees?", "input": "Department: Marketing\nEmployees: 5", "output": "(b)"}
{"instruction": "What is the average salary for each department?", "input": "", "output": "Engineering: $100,000\nSales: $80,000\nMarketing: $90,000\nSupport: $60,000"}
{"instruction": "Update one of the rows from task 10?", "input": "- [\"a\", \"b\", \"c\"]", "output": "- [\"a\", \"b\", \"c\", \"d\"]"}
{"instruction": "Update one of the rows from task 10?", "input": "- [1, 2, 3]", "output": "- [1, 2, 3, 4]"}
{"instruction": "Revoke dba privilege on a user in oracle?", "input": "", "output": "Revoke dba from [username]"}
{"instruction": "Grant select on view to username?", "input": "", "output": "GRANT SELECT ON view TO username"}
{"instruction": "Create table with name, age, sex columns and nullable(age) , default value for sex column is 'm' (male), using the current date as default value for created_at column.", "input": "", "output": "CREATE TABLE person (\nname text,\nage int,\nsex varchar(1) DEFAULT 'm' NOT NULL,\ncreated_at timestamp default current_timestamp\n);"}
{"instruction": "Describe sequence number 1000000 ?", "input": "", "output": "The number is a palindrome. It reads the same forwards and backwards."}
{"instruction": "Drop sequence from testtable;", "input": "testtable = [1, 2, 3, 4, 5]", "output": "drop sequence from testtable;\ntesttable = [1, 2, 3, 4]"}
{"instruction": "What are some of the differences between mysql and sqlite?", "input": "", "output": "MySQL is a relational database management system (RDBMS) that runs as a server providing multi-user access to a number of databases. SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine."}
{"instruction": "Create a table with auto increment id column in snowflake?", "input": "", "output": "CREATE TABLE `snowflake_table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\nPRIMARY KEY (`id`),\nUNIQUE KEY `idx_unique` (`id`)\n);"}
{"instruction": "Insert data into tbl1 values (100,'test') and then run it again to verify that the value has been incremented by one, how do you check this?", "input": "", "output": "INSERT INTO tbl1 VALUES (100,'test')\nSELECT * FROM tbl1;"}
{"instruction": "What is next after 12?", "input": "", "output": "13"}
{"instruction": "List all columns in the schema public?", "input": "", "output": "public? | +- id | +- name | +- created_at | +- updated_at | +- type | +- length | +- nullable | +- unique | +- primary_key | +- foreign_key | +- references | +- columns | +- indexes | +- constraints | +- rules | +- comments"}
{"instruction": "Describe your favorite fruit?", "input": "", "output": "My favorite fruit is banana. It is yellow in color and has a sweet taste. I like to eat it with milk or yogurt."}
{"instruction": "How many employees does google have?", "input": "", "output": "Google has about 70,000 employees."}
{"instruction": "Grant select on warehouse_locations in snowflake?", "input": "", "output": "GRANT SELECT ON warehouse_locations TO [email protected]"}
{"instruction": "Describe warehouse_locations in snowflake?", "input": "{'name': 'Warehouse #1', 'latitude': 40.7, 'longitude': -73.9, 'city': 'New York City', 'state': 'NY', 'country': 'USA', 'distance': 0}", "output": "Warehouse #1 is located in New York City, NY, USA and is 0 miles away from the main office."}
{"instruction": "Describe warehouse_locations in snowflake?", "input": "", "output": "warehouse_locations is a dictionary with the following keys:\n- name: The name of the warehouse.\n- latitude: The latitude of the warehouse.\n- longitude: The longitude of the warehouse.\n- city: The city where the warehouse is located.\n- state: The state where the warehouse is located.\n- country: The country where the warehouse is located.\n- distance: The distance from the main office to the warehouse in miles."}
{"instruction": "Describe warehouse_locations in snowflake?", "input": "{'name': 'Warehouse #2', 'latitude': 41.8, 'longitude': -72.5, 'city': 'Jersey City', 'state': 'NJ', 'country': 'USA', 'distance': 5}", "output": "Warehouse #2 is located in Jersey City, NJ, USA and is 5 miles away from the main office."}
{"instruction": "Describe the structure of table t1 in db d1?", "input": "", "output": "t1 has 3 columns, id, name and age. \nid is the primary key of t1. \nname and age are not nullable."}
{"instruction": "List all views in the database with name starting with letter 'w'?", "input": "", "output": "views: w_add, w_edit, w_delete, w_list"}
{"instruction": "How to find out all the privileges that are granted on a table?", "input": "", "output": "SELECT * FROM information_schema.tables WHERE table_type = 'BASE TABLE' AND table_schema = 'db1';"}
{"instruction": "Is there a way to get information about data types and their length from an existing table?", "input": "", "output": "def get_data_type(table):\n    for row in table:\n        data_type = row[0]\n    return data_type, len(row)"}
{"instruction": "How can i find out how many rows are in a table, what is the largest value for a column, or the average age of my employees?", "input": "", "output": "def countRows(table):\n    return len(table)\ndef maxValue(table):\n    return table[0]\ndef averageAge(table):\n    return sum(table)/len(table)"}
{"instruction": "What is the total amount of money spent on salaries last year?", "input": "", "output": "Total amount of money spent on salaries last year = $1,000,000 + $2,000,000 + $3,000,000 + $4,000,000 + $5,000,000 + $6,000,000 + $7,000,000 + $8,000,000 + $9,000,000 + $10,000,000 = $55,000,000."}
{"instruction": "Which customers have not made any purchases this year?", "input": "Customer: John Smith, 123 Main Street, Anytown, USA.", "output": "(a)"}
{"instruction": "How much did customer smith spend last month?", "input": "", "output": "def getTotalSpend(customer):\n    total = 0\n    for transaction in customer.transactions:\n        if transaction.amount > 0:\n          total += transaction.amount\n    return total"}
{"instruction": "What are the names of the columns in table emp_info?", "input": "", "output": "emp_id, emp_name, salary, dept_id"}
{"instruction": "Describe column emp_id in table emp_info?", "input": "", "output": "Table: emp_info\nColumn: emp_id\nData type: integer\nNullable: No\nPrimary key: Yes\nForeign key: Yes"}
{"instruction": "Describe column emp_id in table emp_info?", "input": "", "output": "Table: user_info\nColumn: name\nData type: varchar(50)\nNullable: No\nPrimary key: Yes\nForeign key: Yes"}
{"instruction": "Describe column emp_id in table emp_info?", "input": "", "output": "emp_id - The employee ID number."}
{"instruction": "What is the name of the database i am currently using?", "input": "", "output": "SELECT name FROM information_schema.schemata WHERE schema_name = 'information_schema';"}
{"instruction": "Create a view called vw_emp with one line that contains employee number, last name and first name?", "input": "", "output": "class Employee(object):\n    def __init__(self, employee_number, last_name, first_name):\n    self.employee_number = employee_number\n    self.last_name = last_name\n    self.first_name = first_name\n    class View(object):\n    def __init__(self, emp_list):\n    self.emp_list = emp_list\n    def get_vw_emp(self):\n    return [self.emp_list[i].employee_number, self.emp_list[i].last_name, self.emp_list[i].first_name]"}
{"instruction": "Which users have update privilege on table emp_info?", "input": "Users: emp_admin, emp_manager", "output": "(b)"}
{"instruction": "Which users have update privilege on table emp_info?", "input": "Users: emp_admin, emp_user", "output": "(a)"}
{"instruction": "Which users have update privilege on table emp_info?", "input": "Users: emp_admin, emp_user, emp_manager", "output": "(c)"}
{"instruction": "How many employees do we have?", "input": "", "output": "def countEmployees(self):\n    total = 0\n    for employee in self.employees:\n        total += 1\n    return total"}
{"instruction": "Alter table to add column with datatype string", "input": "Table:\nCREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)\n);", "output": "ALTER TABLE `users` ADD COLUMN `nickname` varchar(255) DEFAULT NULL AFTER `name`;"}
{"instruction": "Grant privileges on schema my_schema to user1@email.com", "input": "", "output": "GRANT ALL ON my_schema TO user1@email.com;"}
{"instruction": "Is there any way to access data in other warehouses through sql?", "input": "", "output": "Yes, you can use the following syntax to access data in other warehouses through sql.\nSELECT * FROM [warehouse1].[dbo].[table_name] WHERE [condition];"}
{"instruction": "Can we use the same database name for different warehouses in snowflake?", "input": "", "output": "Yes, we can use the same database name for different warehouses in snowflake."}
{"instruction": "List all warehouses that have warehouse_id = 5?", "input": "", "output": "warehouse_id, city, country\n5, New York, United States\n5, Beijing, China\n5, London, United Kingdom\n5, Tokyo, Japan"}
{"instruction": "Alter table my_table add column col3 varchar2(50)?", "input": "", "output": "alter table my_table add column col3 varchar2(50);"}
{"instruction": "Alter table my_table add constraint my_unique_constraint unique (col1, col2) ?", "input": "", "output": "ALTER TABLE my_table ADD CONSTRAINT my_unique_constraint UNIQUE (col1, col2)"}
{"instruction": "Create a view in snowflake that selects from two tables and return results as one row per user?", "input": "View: select * from users u left join orders o on u.id = o.user_id where u.name = 'John' and o.order_date > '2018-01-01';", "output": "id | name | order_date | amount | status\n1 | John | 2018-02-01 | 100 | paid\n2 | John | 2018-03-01 | 200 | paid\n3 | John | 2018-04-01 | 300 | paid\n4 | John | 2018-05-01 | 400 | paid\n5 | John | 2018-06-01 | 500 | paid\n6 | John | 2018-07-01 | 600 | paid\n7 | John | 2018-08-01 | 700 | paid\n8 | John | 2018-09-01 | 800 | paid\n9 | John | 2018-10-01 | 900 | paid\n10 | John | 2018-11-01 | 1000 | paid"}
{"instruction": "Grant select privilege on the new view to all users?", "input": "SQL statement: GRANT SELECT ON new_view TO ALL USERS;", "output": "Yes"}
{"instruction": "Grant select privilege on the new view to all users?", "input": "SQL statement: GRANT SELECT ON new_view TO ALL USERS WITH ADMIN OPTION;", "output": "No"}
{"instruction": "How do i get data out of oracle into snowflake?", "input": "", "output": "You can use the following steps to get data out of oracle into snowflake.\n1) Create a table in snowflake using the same schema as your oracle table.\n2) Use the export utility to export the data from oracle to a csv file.\n3) Import the csv file into the table created in step 1.\n4) You can now query the table and view the data."}
{"instruction": "Show me the first 10 rows of table tbl_name?", "input": "Table: tbl_name", "output": "id, name, age\n1, John, 25\n2, Mary, 23\n3, Jane, 22\n4, Mark, 21\n5, James, 20\n6, Robert, 19\n7, Thomas, 18\n8, William, 17\n9, David, 16\n10, Charles, 15"}
{"instruction": "Delete column name from table tbl_name?", "input": "Table: tbl_name\nColumn Name: column1, column2, column3", "output": "tbl_name"}
{"instruction": "How do i insert data into a table?", "input": "", "output": "Insert into users values ('Jane', 'Doe', 'jane.doe@gmail.com'),('John', 'Doe', 'john.doe@gmail.com');"}
{"instruction": "How do i insert data into a table?", "input": "", "output": "INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);"}
{"instruction": "How do i insert data into a table?", "input": "", "output": "Insert into users values ('Jane', 'Doe', 'jane.doe@gmail.com');"}
{"instruction": "How do i insert data into a table?", "input": "", "output": "Insert into users values ('John', 'Doe', 'john.doe@gmail.com');"}
{"instruction": "How can i get all rows of a table?", "input": "", "output": "def getAllRows(table):\n    rows = []\n    for row in table.find():\n        rows.append(row)\n    return rows"}
{"instruction": "What is a primary key?", "input": "", "output": "A primary key is a column or set of columns in a database table that uniquely identifies each row."}
{"instruction": "Restore from backup on db zzzz?", "input": "", "output": "db.restore(\u2018zzzz\u2019)"}
{"instruction": "Alter the schema of table abc to add a column cde?", "input": "", "output": "ALTER TABLE abc ADD COLUMN cde INT;"}
{"instruction": "What are the tables in mydbname.snowflakedb.tbl_xyz?", "input": "", "output": "tbl_xyz.snowflakedb.mydbname"}
{"instruction": "Create table with column name xyz, type varchar(30), primary key and nullable for tbl_xyz?", "input": "", "output": "CREATE TABLE tbl_xyz (\nxyz varchar(30) NOT NULL,\nPRIMARY KEY CLUSTERED (xyz));"}
{"instruction": "Show grants on table abc?", "input": "", "output": "grants on table abc?\nselect * from grants;"}
{"instruction": "Grant select on tbl_xyz to user1@domain.com?", "input": "", "output": "GRANT SELECT ON tbl_xyz TO user1@domain.com"}
{"instruction": "Show table from schema 'snowflake'?", "input": "", "output": "CREATE TABLE snowflake.snowflake_table (\nid INTEGER PRIMARY KEY,\nname VARCHAR(255) NOT NULL,\nage INTEGER NOT NULL,\ncity VARCHAR(255) NOT NULL,\nstate CHAR(2) NOT NULL,\ncountry CHAR(3) NOT NULL,\ncreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\nmodified TIMESTAMP DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP);"}
{"instruction": "Describe table in snowflake with schema, name and column types?", "input": "", "output": "Table name: snowflake\nSchema:\nColumn type:\nname | age | gender | city\nJohn | 30 | M | New York\nMary | 25 | F | San Francisco\nBill | 35 | M | Los Angeles\nJane | 20 | F | Seattle"}
{"instruction": "Create procedure in snowflake?", "input": "", "output": "def snowflake(n):\n    if n == 0:\n    return []\n    else:\n    return [snowflake(n-1)] + snowflake(n-2)"}
{"instruction": "What are the procedures i have created?", "input": "", "output": "def add(x, y):\n    return x + y\ndef subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y"}
{"instruction": "List all the employees who work at the new york warehouse.", "input": "", "output": "[{'name': 'John', 'age': 25, 'dept': 'IT'}, {'name': 'Jane', 'age': 23, 'dept': 'Sales'}]"}
{"instruction": "Are there any employees working at more than one warehouse?", "input": "Employee: John Smith works at both warehouse A and warehouse B.\nEmployee: Mary Jones works at warehouse A only.\nEmployee: Bill Brown works at warehouse B only.\nEmployee: None of the above.", "output": "Yes"}
{"instruction": "Is john smith an employee?", "input": "Name: John Smith\nEmployee ID: 987654321", "output": "No"}
{"instruction": "Is john smith an employee?", "input": "Name: John Smith\nEmployee ID: 123456789", "output": "Yes"}
{"instruction": "Alter column data type in snowflake?", "input": "Column Name | Column Type\nA | VARCHAR(10)\nB | INTEGER\nC | DATE\nD | CHAR(20)\nE | DECIMAL(5,2)", "output": "Column Name | Column Type\nA | VARCHAR(10)\nB | INTEGER\nC | DATE\nD | CHAR(20)\nE | DECIMAL(5,2)\nF | TEXT\nG | FLOAT\nH | TINYINT\nI | BIT(3)\nJ | BOOLEAN\nK | VARBINARY(10)\nL | MEDIUMBLOB\nM | LONGVARBINARY(10)\nN | LONGBLOB"}
{"instruction": "Alter index on a table in snowflake?", "input": "", "output": "alter index on table_name using (index_name = new_index_name)"}
{"instruction": "Alter the schema of abc to add an index on column xyz?", "input": "", "output": "class Solution(object):\n    def addIndex(self, abc):\n    self.abc = abc.copy()\n \n    self.abc.columns[0] = 'xyz'"}
{"instruction": "Backup the database \"snowflake\"?", "input": "", "output": "import boto3\nsnowflake_db = boto3.resource('snowflake')\nsnowflake_db.create_snapshot(description='Daily backup', force=True)"}
{"instruction": "Create a new user with password 'abc' and grant it roles 'abc'?", "input": "", "output": "CREATE USER 'abc'@'localhost' IDENTIFIED BY 'abc';\nGRANT ALL ON *.* TO 'abc'@'localhost';"}
{"instruction": "List column name, datatype and size for each column of a table?", "input": "Table:\nColumn Name | Data Type | Size\nName | varchar(50) | 50\nAge | int | 4\nHeight | float | 3\nWeight | float | 2\nCity | varchar(20) | 20\nState | char(2) | 2\nZip | char(10) | 10", "output": "Name | varchar(50) | 50\nAge | int | 4\nHeight | float | 3\nWeight | float | 2\nCity | varchar(20) | 20\nState | char(2) | 2\nZip | char(10) | 10"}
{"instruction": "Show columns from my_table?", "input": "Table: my_table?", "output": "id, name, age, gender, address"}
{"instruction": "What is the last inserted id of table abc?", "input": "", "output": "SELECT MAX(id) FROM abc;"}
{"instruction": "Create a user in snowflake with password as 'password'?", "input": "", "output": "snowflake> create user test with password 'password';\nsnowflake> grant all privileges on database test to test;\nsnowflake> exit;"}
{"instruction": "Grant select on my_table to the newly created user?", "input": "", "output": "GRANT SELECT ON my_table TO 'newuser'@'localhost';"}
{"instruction": "Set timezone to be utc?", "input": "", "output": "import pytz\npytz.timezone('UTC')"}
{"instruction": "List all privileges for user 'snow' in snowflake?", "input": "", "output": "snowflake@snowflake:~$ sudo -u snowflake ppriv -l\n-a,--all List all privileges."}
{"instruction": "Drop view with name 'view1'?", "input": "", "output": "DROP VIEW view1;"}
{"instruction": "Drop database with name 'database3'?", "input": "", "output": "DROP DATABASE database3;"}
{"instruction": "Create an index on warehouse_id and date column?", "input": "", "output": "CREATE INDEX warehouse_idx ON warehouse(warehouse_id, date);"}
{"instruction": "What is the last record inserted into table xxx?", "input": "Table: xxx, id, name, age", "output": "The last record inserted into table xxx is the one with id = 3."}
{"instruction": "List tables that have more than 10 records?", "input": "", "output": "- Table1 (11 records)\n- Table2 (12 records)\n- Table3 (13 records)"}
{"instruction": "List all warehouses where the name starts with 'a'?", "input": "", "output": "['a Warehouse', 'b Warehouse']"}
{"instruction": "List all users who are not superusers?", "input": "Users: Alice, Bob, Charlie\nSuperusers: Alice, Bob", "output": "(a)"}
{"instruction": "List all users who have been created after today?", "input": "", "output": "SELECT * FROM users WHERE created_at > CURRENT_DATE"}
{"instruction": "Show the schema for all tables in my database?", "input": "", "output": "CREATE TABLE `users` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `name` (`name`)\n);\nCREATE TABLE `posts` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`user_id` int(11) DEFAULT NULL,\n`title` varchar(255) DEFAULT NULL,\n`body` text,\nPRIMARY KEY (`id`),\nKEY `user_id` (`user_id`),\nCONSTRAINT `fk_posts_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE\n);"}
{"instruction": "What's the max size of a column?", "input": "", "output": "def maxColumnSize(n):\n    if n == 0:\n    return 0\n    else:\n    return max(maxColumnSize(n-1), n)"}
{"instruction": "What is the name of my current database in snowflake?", "input": "", "output": "snowflake> select current_database();\ncurrent_database ------------ mydb"}
{"instruction": "Describe table t1 from schema sf_test in snowflake?", "input": "", "output": "Table t1 is a table with 3 columns and 4 rows. The first column is id, the second column is name, the third column is age, and the fourth column is gender."}
{"instruction": "Create view vw_t1 as select * from t1 in snowflake?", "input": "", "output": "CREATE VIEW vw_t1 AS SELECT * FROM t1;"}
{"instruction": "Show users and their roles in snowflake?", "input": "", "output": "user_id | role \n1 | Administrator\n2 | Manager\n3 | Developer\n4 | Analyst\n5 | Designer\n6 | Tester\n7 | Intern\n8 | Student\n9 | Guest\n10 | Customer\n11 | Partner\n12 | Vendor\n13 | Contractor\n14 | Other"}
{"instruction": "Create a user named testuser with password 'test123' who can connect to any database?", "input": "", "output": "CREATE USER testuser WITH PASSWORD 'test123';\nGRANT ALL ON *.* TO testuser;"}
{"instruction": "Grant select on all tables to testuser?", "input": "", "output": "GRANT SELECT ON ALL TABLES TO testuser"}
{"instruction": "Change the password of an existing user?", "input": "", "output": "def changePassword(self, userId, newPassword):\n    self.db.execute(\"UPDATE users SET password=? WHERE id=?\", (newPassword, userId))"}
{"instruction": "Grant select on all tables in a schema to user1@localhost?", "input": "", "output": "GRANT SELECT ON ALL TABLES IN SCHEMA public TO user1@localhost"}
{"instruction": "Show me only first 5 rows of test in snowflake?", "input": "", "output": "5"}
{"instruction": "Create trigger on table test in snowflake?", "input": "", "output": "CREATE TRIGGER test_trigger ON test AFTER INSERT AS\nBEGIN\nEND;"}
{"instruction": "Create a database and table", "input": "Database: Movies\nTable: Movie\nColumns: Title, Year, Genre", "output": "CREATE TABLE IF NOT EXISTS `Movies` ( `Title` varchar(255) COLLATE utf8_unicode_ci NOT NULL, `Year` int(11) DEFAULT NULL, `Genre` char(10) COLLATE utf8_unicode_ci NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"}
{"instruction": "Create a database and table", "input": "Database: People\nTable: Person\nColumns: Name, Age, Gender", "output": "CREATE TABLE IF NOT EXISTS `People` ( `Name` varchar(255) COLLATE utf8_unicode_ci NOT NULL, `Age` int(11) DEFAULT NULL, `Gender` char(1) COLLATE utf8_unicode_ci NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"}
{"instruction": "Describe view using sql query?", "input": "", "output": "SELECT * FROM table WHERE column = value;"}
{"instruction": "Which users have access to tables from warehouse1 schema?", "input": "", "output": "warehouse1"}
{"instruction": "How many warehouses does company x have?", "input": "", "output": "def numberOfWarehouses(x):\n    return len([warehouse for warehouse in x if warehouse.name == 'warehouse'])"}
{"instruction": "Insert a row in the \"test\" schema and return the primary key of that row?", "input": "", "output": "INSERT INTO test (name, age) VALUES ('John', 25);"}
{"instruction": "What are my tables named after?", "input": "Jane, Doe", "output": "Table 1 is named after the first letter of your name.\nTable 2 is named after the second letter of your name."}
{"instruction": "What are my tables named after?", "input": "", "output": "Table 1 is named after the first letter of your name.\nTable 2 is named after the second letter of your name."}
{"instruction": "What are my tables named after?", "input": "John, Smith", "output": "Table 1 is named after the first letter of your name.\nTable 2 is named after the second letter of your name."}
{"instruction": "Drop a view in snowflake? 12.drop database in snowflake? 13.create an index on column xyz? 14.list all indexes on a table? 15.list all columns in a table?", "input": "", "output": "DROP VIEW IF EXISTS v1;\nCREATE VIEW v1 AS SELECT * FROM t1;\nCREATE INDEX idx_id ON t1(id);\nSELECT * FROM v1;\nSELECT * FROM t1;\nSELECT * FROM SYS.INDEXES WHERE TABLE_NAME = 't1';\nSELECT * FROM SYS.COLUMNS WHERE TABLE_NAME = 't1';"}
{"instruction": "Grant update privilege on table 'employees' to user 'john'?", "input": "", "output": "GRANT UPDATE ON employees TO john;"}
{"instruction": "Revoke select privilege on table 'employees' from user 'jane'?", "input": "", "output": "revoke select on employees from jane;"}
{"instruction": "List all users that have been granted the 'read' privilege?", "input": "", "output": "user1, user2, user3"}
{"instruction": "Show a warehouse's location?", "input": "", "output": "The warehouse is located at the following coordinates: (40.7, -73.9)"}
{"instruction": "List all warehouses for company x?", "input": "", "output": "warehouses = ['San Jose', 'New York', 'London']"}
{"instruction": "Show me the schemas and tables in snowflake?", "input": "", "output": "Schemas:\nsnowflake_catalog\ntables:\nsnowflake_catalog.account\nsnowflake_catalog.customer\nsnowflake_catalog.product\nsnowflake_catalog.store"}
{"instruction": "Create a table named \"testtable\" with id as primary key, column name varchar(20), data_type int?", "input": "", "output": "CREATE TABLE testtable (id int PRIMARY KEY, name varchar(20), data_type int?)"}
{"instruction": "Insert into testtable values (1,'vishal','1')", "input": "", "output": "INSERT INTO testtable VALUES (1,'vishal','1')"}
{"instruction": "List out the column names of the first row in the table?", "input": "Table: Name, Age, Height, Weight, Gender", "output": "Name, Age, Height, Weight, Gender"}
{"instruction": "Grant select privilege to role myrole on schema public?", "input": "", "output": "yes"}
{"instruction": "Show tables in oracle?", "input": "", "output": "CREATE TABLE table1 (id NUMBER(10), name VARCHAR2(20));\nCREATE TABLE table2 (id NUMBER(10), name VARCHAR2(20));\nINSERT INTO table1 VALUES (1, 'John');\nINSERT INTO table1 VALUES (2, 'Mary');\nINSERT INTO table2 VALUES (1, 'John');\nINSERT INTO table2 VALUES (2, 'Mary');\nSELECT * FROM table1;\nID NAME\n-- ----------\n1 John\n2 Mary\nSELECT * FROM table2;\nID NAME\n-- ----------\n1 John\n2 Mary"}
{"instruction": "How do i grant privileges to another user?", "input": "", "output": "grant privileges on database.table to user@localhost identified by 'password';"}
{"instruction": "Connect as a different user?", "input": "", "output": "import os\nos.system('whoami')"}
{"instruction": "Can i execute this query against my database?", "input": "Query: SELECT * FROM users WHERE id = '1' AND age > 25;", "output": "Yes, you can execute this query against your database."}
{"instruction": "Drop table in my_db?", "input": "", "output": "DROP TABLE my_db.my_table;"}
{"instruction": "Alter table my_table set primary key (col1, col2)?", "input": "", "output": "ALTER TABLE my_table ADD PRIMARY KEY (col1, col2);"}
{"instruction": "Select * from vw_testview where name1='abc' and name2='xyz'?", "input": "", "output": "*"}
{"instruction": "Connect to database 'snowflake' as user 'scott' using password 'tiger'?", "input": "", "output": "Connecting to database 'snowflake' as user 'scott' using password 'tiger'."}
{"instruction": "Create a new user with username=bob and password=123456;", "input": "", "output": "user = User(username='bob', password='123456')"}
{"instruction": "Create user in mysql database?", "input": "", "output": "CREATE USER 'user'@'localhost' IDENTIFIED BY 'password';"}
{"instruction": "Describe view in mysql database?", "input": "", "output": "A view is a stored query. It can be used to create virtual tables in the database, which behave like normal tables but are not stored on disk. They are created and maintained in memory only."}
{"instruction": "Show me the schema that has users?", "input": "", "output": "class User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True)\n    email = db.Column(db.String(128))\n    password = db.Column(db.String(64))\n    created_at = db.Column(db.DateTime)\n    updated_at = db.Column(db.DateTime)"}
{"instruction": "Grant alter on the dba_objects table in snowflake?", "input": "", "output": "alter table dba_objects grant alter on * to [email protected]"}
{"instruction": "Create a view with auto incrementing primary key in snowflake?", "input": "", "output": "CREATE VIEW `view_name` (`id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;"}
{"instruction": "Load data into a snowflake db?", "input": "", "output": "from pysnow.snow import SnowflakeDB\ndb = SnowflakeDB('/path/to/data')\ndb.load_file('/path/to/data/input.csv')\ndb.save_file('/path/to/output.csv')"}
{"instruction": "Upgrade a snowflake db?", "input": "", "output": "class Solution(object):\n    def upgradeSnowflakeDb(self, db):\n    for table in db.tables:\n    if table.name == 'snowflake_table':\n    self.upgradeTable(db, table)"}
{"instruction": "Create a role and assign privileges on a table to it?", "input": "", "output": "CREATE ROLE [role_name] WITH LOGIN;\nGRANT SELECT ON TABLE [table_name] TO [role_name];\nGRANT UPDATE ON TABLE [table_name] TO [role_name];\nGRANT DELETE ON TABLE [table_name] TO [role_name];\nDROP ROLE [role_name];"}
{"instruction": "Grant that role to user3?", "input": "Role: user3", "output": "Yes"}
{"instruction": "How do i check if a user has been granted privileges on a table in snowflake?", "input": "", "output": "SELECT table_name, column_name, privilege_type FROM user_privileges WHERE grantee = 'user' AND table_name = 'table';"}
{"instruction": "Can you explain about triggers in snowflake?", "input": "", "output": "A trigger is a special type of stored procedure that is executed when an event occurs. Triggers are defined on tables and fire automatically when certain actions occur to the table. For example, you can create a trigger that fires whenever data is inserted into a table or updated in a table. You can also create triggers that fire when data is deleted from a table."}
{"instruction": "Explain the different types of triggers available in snowflake?", "input": "", "output": "There are three types of triggers available in snowflake. They are as follows:\n1) DML Triggers - These triggers are fired when a data manipulation language (DML) statement is executed on the table. For example, if you want to fire a trigger whenever an insert or update operation is performed on a table, then you can use DML triggers.\n2) Stored Procedure Triggers - These triggers are fired when a stored procedure is executed on the table. For example, if you want to fire a trigger whenever a stored procedure is executed on a table, then you can use stored procedure triggers.\n3) Event Triggers - These triggers are fired when an event occurs on the table. For example, if you want to fire a trigger whenever a row is inserted into a table, then you can use event triggers."}
{"instruction": "Which type of trigger can be used to insert data into a table?", "input": "", "output": "- AFTER INSERT\n- BEFORE UPDATE- AFTER DELETE"}
{"instruction": "Create a new user and give it dba role?", "input": "", "output": "CREATE USER [email protected] IDENTIFIED BY 'password';\nGRANT dba TO [email protected];"}
{"instruction": "Call this procedure from sql*plus?", "input": "", "output": "CREATE OR REPLACE PROCEDURE get_name(p_id IN NUMBER) AS\nBEGIN\nEND;"}
{"instruction": "Grant select, insert, update, delete to public on tbl_xyz?", "input": "", "output": "GRANT SELECT, INSERT, UPDATE, DELETE ON tbl_xyz TO PUBLIC"}
{"instruction": "Show users in role dba?", "input": "Query: select * from users where role = 'dba'", "output": "Yes"}
{"instruction": "Show users in role dba?", "input": "Query: select * from users where role = 'dba' and user_type = 'employee'", "output": "No"}
{"instruction": "Create function f1(arg1 int, arg2 text) returns integer?", "input": "Function: f1(arg1 int, arg2 text) returns integer?", "output": "def f1(arg1 int, arg2 text):\n    if arg1 > 0 and arg2 == \"yes\":\n    return True\n    else:\n    return False"}
{"instruction": "Create trigger trg_abc on abc for update?", "input": "", "output": "CREATE TRIGGER trg_abc ON abc FOR UPDATE"}
{"instruction": "List all tables and columns in warehouse ws?", "input": "", "output": "tables:\n- ws_warehouse\ncolumns:\n- id\n- name\n- type\n- created_at\n- updated_at"}
{"instruction": "Count distinct values in column?", "input": "[1, 2, 3, 4, 5, 6]", "output": "6"}
{"instruction": "Count distinct values in column?", "input": "[1, 2, 3, 4, 5]", "output": "5"}
{"instruction": "Find out the last time a table was modified in snowflake?", "input": "", "output": "last_modified = table.get('last_modified')\nif last_modified is None:\nprint(\"Table does not have a last modified column\")\nelse:\nprint(last_modified)"}
{"instruction": "Create a table with a specified structure?", "input": "Table: Name, Age, Height, Weight", "output": "Name | Age | Height | Weight\nGeorge Washington | 67 | 185.5 | 77.2"}
{"instruction": "Delete data from the table created by you?", "input": "Table:\n- id | name | age\n1 | John | 25\n2 | Jane | 23\n3 | Mark | 22\n4 | Mary | 21\n5 | James | 20\n6 | David | 19\n7 | Michael | 18\n8 | Thomas | 17\n9 | Peter | 16\n10 | Paul | 15\n11 | George | 14\n12 | Andrew | 13\n13 | Edward | 12\n14 | William | 11\n15 | Richard | 10\n16 | Robert | 9\n17 | Joseph | 8\n18 | Jonathan | 7\n19 | Charles | 6\n20 | Henry | 5\n21 | Adam | 4\n22 | Samuel | 3\n23 | Alexander | 2\n24 | Benjamin | 1", "output": "- id | name | age\n1 | John | 25\n2 | Jane | 23\n3 | Mark | 22\n4 | Mary | 21\n5 | James | 20\n6 | David | 19\n7 | Michael | 18\n8 | Thomas | 17\n9 | Peter | 16\n10 | Paul | 15\n11 | George | 14\n12 | Andrew | 13\n13 | Edward | 12\n14 | William | 11\n15 | Richard | 10\n16 | Robert | 9\n17 | Joseph | 8\n18 | Jonathan | 7\n19 | Charles | 6\n20 | Henry | 5\n21 | Adam | 4\n22 | Samuel | 3\n23 | Alexander | 2\n24 | Benjamin | 1"}
{"instruction": "List the users of database y?", "input": "", "output": "SELECT * FROM users WHERE user_id IN (1, 2, 3);"}
{"instruction": "What are the last 5 records in table x?", "input": "", "output": "[-1, -2, -3, -4, -5]"}
{"instruction": "How do i select * from table x?", "input": "", "output": "select * from table x"}
{"instruction": "Execute the following statement: alter table tbl add column c varchar(50);", "input": "", "output": "alter table tbl add column c varchar(50);"}
{"instruction": "Show data of table tbl?", "input": "", "output": "tbl?\n| id | name | age | gender | city | country |\n| 1 | John | 32 | M | New York | USA |\n| 2 | Mary | 27 | F | London | UK |\n| 3 | Jane | 23 | F | Paris | FR |\n| 4 | Jack | 25 | M | Berlin | DE |\n| 5 | Jill | 21 | F | Tokyo | JP |"}
{"instruction": "Restore from the last full backup into database snowflake?", "input": "", "output": "Restore from backup into database snowflake? (y/n) y\nEnter the number of the backup to restore from: 1\nRestoring from backup #1...\nRestored."}
{"instruction": "Select count(*) from table1 in database snowflake?", "input": "", "output": "select count(*) from table1 in database snowflake?"}
{"instruction": "Describe column type,nullable from table1 in database snowflake?", "input": "", "output": "Column Type Nullable\nName VARCHAR2(20) NOT NULL\nAge NUMBER(10,0) NULL\nCity VARCHAR2(30) NULL"}
{"instruction": "Create table abc (col1 int, col2 varchar(50), primary key (col1));", "input": "", "output": "CREATE TABLE abc (col1 int, col2 varchar(50), primary key (col1));"}
{"instruction": "Is user testuser allowed to connect to the database tbl_name?", "input": "User testuser is not allowed to connect to the database tbl_name.", "output": "False"}
{"instruction": "Is user testuser allowed to connect to the database tbl_name?", "input": "User testuser is allowed to connect to the database tbl_name.", "output": "True"}
{"instruction": "Alter a column from varchar to int?", "input": "varchar(50)", "output": "int(50)"}
{"instruction": "Alter a column from varchar to int?", "input": "varchar(100)", "output": "int(100)"}
{"instruction": "Create a new user called admin with password as \"admin\" and add this user to schema public?", "input": "", "output": "CREATE USER admin WITH PASSWORD 'admin';\nGRANT ALL ON SCHEMA public TO admin;"}
{"instruction": "Create a trigger on a table in snowflake that fires when someone inserts data into it?", "input": "", "output": "CREATE TRIGGER [insert_trigger] ON [dbo].[table1] FOR INSERT AS\nBEGIN\nEND;"}
{"instruction": "Show me all users who have access to the db called customer?", "input": "", "output": "db.getSiblingDB('customer').users"}
{"instruction": "Grant select,insert,update and delete privileges to public for table1 in snowflake?", "input": "", "output": "GRANT SELECT, INSERT, UPDATE, DELETE ON table1 TO public;"}
{"instruction": "Create a view vvv with columns aaa, bbb and ccc in schema zzz?", "input": "", "output": "CREATE VIEW vvv AS SELECT aaa, bbb, ccc FROM zzz;"}
{"instruction": "Create a trigger ttt on table xxx in schema yyy after insert?", "input": "", "output": "CREATE TRIGGER ttt ON xxx AFTER INSERT"}
{"instruction": "Select count(*) from table2 in warehouse1?", "input": "", "output": "select count(*) from table2 in warehouse1;"}
{"instruction": "Which databases are available in my database?", "input": "", "output": "db1, db2, db3"}
{"instruction": "List functions and procedures in a schema?", "input": "", "output": "CREATE FUNCTION get_name(p_id int) RETURNS varchar(50) AS $$ SELECT name FROM person WHERE id = p_id; $$ LANGUAGE SQL; CREATE PROCEDURE update_name(p_id int, p_name varchar(50)) BEGIN UPDATE person SET name = p_name WHERE id = p_id; END; $$ LANGUAGE plpgsql;"}
{"instruction": "What tables are used by the function/procedure?", "input": "Function:\ndef f(x):\n    return x + 2", "output": "f uses a global variable named x."}
{"instruction": "What tables are used by the function/procedure?", "input": "Procedure:\ndef g():\n    return 10", "output": "g uses a global variable named n."}
{"instruction": "List all columns on table <tablename>?", "input": "Table: employees", "output": "id, name, age, salary"}
{"instruction": "List all columns on table <tablename>?", "input": "Table: products", "output": "id, name, price"}
{"instruction": "Revoke all privileges from a user on a table in snowflake?", "input": "", "output": "Revoke from user_table where username = 'user1';\nRevoke from user_table where username = 'user2';\nRevoke from user_table where username = 'user3';"}
{"instruction": "Show all tables in schema named \"my_schema\"?", "input": "", "output": "tables in schema my_schema;"}
{"instruction": "Show all tables in schema named \"my_schema\"?", "input": "", "output": "show tables in my_schema;"}
{"instruction": "What is the total number of warehouses in all databases in snowflake schema?", "input": "", "output": "Database:\n- Table A has 3 columns and 2 rows.\n- Table B has 4 columns and 5 rows.\n- Table C has 6 columns and 7 rows.\nTotal number of warehouses = (2 * 3) + 1 = 9"}
{"instruction": "What is the total number of warehouses in all databases in snowflake schema?", "input": "", "output": "The total number of warehouses in all databases in snowflake schema is (number of tables * number of columns) + 1."}
{"instruction": "List all tables that have more than 5 rows in warehouse table?", "input": "", "output": "SELECT * FROM warehouse WHERE num_rows > 5;"}
{"instruction": "List all users with firstname as bob?", "input": "List: [{'firstname': 'Bob', 'lastname': 'Smith'}, {'firstname': 'Bob', 'lastname': 'Jones'}]", "output": "Bob Smith, Bob Jones"}
{"instruction": "Describe the schema of employee_view?", "input": "", "output": "employee_view is a view that returns the following columns: id, first_name, last_name, email, phone_number."}
{"instruction": "Drop table with name 'snowflake_test'?", "input": "", "output": "DROP TABLE snowflake_test;"}
{"instruction": "Select all data from warehouse 'warehouse1'?", "input": "", "output": "warehouse1.item_id, warehouse1.name, warehouse1.price"}
{"instruction": "Show schema for table named 'snowflake_test'?", "input": "", "output": "CREATE TABLE snowflake_test (\nid INTEGER PRIMARY KEY,\nname VARCHAR(100) NOT NULL,\nage INTEGER NOT NULL,\ncity VARCHAR(50) NOT NULL,\ncountry VARCHAR(50) NOT NULL,\ncreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\nmodified TIMESTAMP DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP);"}
{"instruction": "Connect to warehouse 'warehouse1' as user 'smith'?", "input": "", "output": "Connected."}
{"instruction": "Revoke privilege to alter any column of table tbl1 in snowflake?", "input": "", "output": "ALTER TABLE tbl1 NO INHERIT UPDATE ON col1;"}
{"instruction": "Grant insert on abc to testuser;", "input": "", "output": "GRANT INSERT ON abc TO testuser;"}
{"instruction": "Connect to mydb using userid and password?", "input": "", "output": "import pymysql as mysql\nconn = mysql.connect(host='localhost', user='root', passwd='password')"}
{"instruction": "List the columns of a view in snowflake?", "input": "", "output": "CREATE VIEW v1 AS SELECT * FROM (SELECT 1 as a, 2 as b, 3 as c) t(a, b, c);\nColumns of view v1:\na, b, c"}
{"instruction": "How do i find out what version of snowflake am i running?", "input": "", "output": "snowflake version -V"}
{"instruction": "What are the privileges granted to user \"abc\" in db abc?", "input": "", "output": "db.grant_permission(u'abc', 'select,insert,update,delete', {'create': False})"}
{"instruction": "What schema's do i have access to?", "input": "", "output": "Schema's: \n- schema1\n- schema2"}
{"instruction": "Who is the current user?", "input": "", "output": "John"}
{"instruction": "Show the list of databases in snowflake?", "input": "", "output": "List of databases in snowflake:\n- master\n- mydb"}
{"instruction": "What are the types of indexes that can be created on a table?", "input": "", "output": "Primary Key, Unique Key, Foreign Key, Check Constraint."}
{"instruction": "Create user \"sales\" with password \"abc123\" and role \"admin\"?", "input": "", "output": "CREATE USER sales PASSWORD 'abc123' ;\nGRANT ALL ON *.* TO sales;\nALTER ROLE sales WITH SUPERUSER;"}
{"instruction": "Describe column customer_id of table sales?", "input": "", "output": "customer_id | sales_date | product_id | quantity | price"}
{"instruction": "Insert into table sales values (\"100\", \"joe\", \"smith\")?", "input": "", "output": "sales | name | city\n100 | joe | smith"}
{"instruction": "Update table sales set total = 1000000 where customer_id = '100'?", "input": "", "output": "UPDATE sales SET total = 1000000 WHERE customer_id = '100'"}
{"instruction": "Add the current user to the testuser role in snowflake?", "input": "", "output": "snowflake=> alter role testuser with login;\nQuery OK, 0 rows affected (0.00 sec)"}
{"instruction": "What are the schemas in my database?", "input": "", "output": "Schema: \nTable: users\nColumns: id, name, email, password, created_at, updated_at\nSchema: \nTable: posts\nColumns: id, title, content, created_at, updated_at\nSchema: \nTable: tags\nColumns: id, name, created_at, updated_at\nSchema: \nTable: comments\nColumns: id, post_id, comment, created_at, updated_at"}
{"instruction": "Who is logged into my database?", "input": "", "output": "SELECT * FROM users WHERE username = 'admin';"}
{"instruction": "Which users have access to this table?", "input": "Table name: table2", "output": "(b)"}
{"instruction": "Which users have access to this table?", "input": "Table name: table3", "output": "(c)"}
{"instruction": "Which users have access to this table?", "input": "Table name: table1", "output": "(a)"}
{"instruction": "What roles exist in my database?", "input": "", "output": "ROLE_ADMIN, ROLE_USER"}
{"instruction": "Select from users where username='test'?", "input": "Users: test, test3", "output": "False"}
{"instruction": "Select from users where username='test'?", "input": "Users: test, test2", "output": "True"}
{"instruction": "Grant all privileges on *.* to test@localhost with grant option?", "input": "", "output": "GRANT ALL PRIVILEGES ON *.* TO 'test@localhost' WITH GRANT OPTION;"}
{"instruction": "Create a procedure with name \"sp_test\" and body as select * from testtable;", "input": "", "output": "CREATE PROCEDURE sp_test AS SELECT * FROM testtable;"}
{"instruction": "Execute the procedure sp_test?", "input": "", "output": "CREATE PROCEDURE sp_test(IN p1 INT, IN p2 INT) BEGIN DECLARE v1 INT; DECLARE v2 INT; SET v1 = p1 + p2; SET v2 = p1 - p2; SELECT CASE WHEN v1 > 0 THEN 'Positive' ELSE 'Negative' END AS result; END"}
{"instruction": "Alter the procedure sp_test to add one more parameter?", "input": "", "output": "CREATE PROCEDURE sp_test(IN p1 INT, IN p2 INT) AS BEGIN \nEND;"}
{"instruction": "Create an index on a column in a view?", "input": "View: CREATE VIEW v1 AS SELECT * FROM tbl;", "output": "ALTER VIEW v1 ADD INDEX idx_v1_id ON (id);"}
{"instruction": "Create an index on a column in a view?", "input": "View: CREATE OR REPLACE VIEW v2 AS SELECT * FROM tbl WHERE col = 'foo';", "output": "ALTER VIEW v2 ADD INDEX idx_v2_col ON (col);"}
{"instruction": "What is the definition of the new view?", "input": "View: A view is a virtual table that contains the results of a query.", "output": "A view is a virtual table that contains the results of a query."}
{"instruction": "What columns does the new view have?", "input": "View: CREATE VIEW v1 AS SELECT * FROM tbl;", "output": "The new view has the columns id, name and age."}
{"instruction": "Show me the contents of the view?", "input": "", "output": "<html>\n<head>\n</head>\n<body>\n<h1>Hello World!</h1>\n</body>\n</html>"}
{"instruction": "Create a partition on the column c1 of t2 table?", "input": "Table: t2", "output": "Partition on column c1 of table t2."}
{"instruction": "Create an index in a snowflake warehouse on column xyz?", "input": "", "output": "CREATE INDEX ON warehouse(xyz);"}
{"instruction": "Drop a partition in snowflake database tbl_snow?", "input": "", "output": "DROP PARTITION (year=2017);"}
{"instruction": "Show foreign keys from table t1?", "input": "", "output": "t1.id, t2.id"}
{"instruction": "How to see the parameters of a function?", "input": "", "output": "def func(a, b):\n    print(a)\n    print(b)"}
{"instruction": "How to check if a table exists in a database?", "input": "", "output": "def tableExists(tableName):\n    try:\n    c = conn.cursor()\n \n    except:\n    return False\n    cur = c.execute(\"SELECT * FROM %s\" % (tableName))\n    if len(cur.fetchall()) == 0:\n    return True\n    else:\n    return False"}
{"instruction": "Show grants for bob@localhost on *.* to bob@localhost;", "input": "", "output": "bob@localhost ALL=(ALL) NOPASSWD: /bin/ls, /usr/bin/lpr"}
{"instruction": "Create a table with column name1, column name2 and column name3?", "input": "", "output": "table = {'name1': 'value1', 'name2': 'value2', 'name3': 'value3'}"}
{"instruction": "What database am i connected to?", "input": "", "output": "SELECT @@SERVERNAME;"}
{"instruction": "What tables do i have in snowflake and what is the primary key of each table?", "input": "", "output": "snowflake.accounts has account_id as primary key and name, email, phone, address, city, state, zipcode, country_id as columns."}
{"instruction": "How can i get the current date and time from snowflake?", "input": "", "output": "import time\nnow = time.time()\nprint(now)"}
{"instruction": "Where do you live?", "input": "", "output": "- I live in the United States.\n- I live in Canada.\n- I live in China.\n- I live in Australia."}
{"instruction": "Create a table with the same structure as table2 but with different column names?", "input": "Table: Table2", "output": "Table3"}
{"instruction": "What is an alias for a column name?", "input": "", "output": "An alias is a name for a column."}
{"instruction": "How to change the default database in psql?", "input": "", "output": "\\connect [database]"}
{"instruction": "Drop user with no privileges on any table?", "input": "", "output": "DROP USER 'user'@'localhost';"}
{"instruction": "Is column id nullable?", "input": "Column id: null", "output": "Yes"}
{"instruction": "Is column id nullable?", "input": "Column id: not null", "output": "No"}
{"instruction": "Drop the role \"testuser\" ?", "input": "", "output": "DROP ROLE testuser;"}
{"instruction": "Is there any data in table test?", "input": "", "output": "table test:\nno data in table test."}
{"instruction": "How to backup a mysql database?", "input": "", "output": "mysqldump -u [username] -p[password] --add-drop-table --routines --databases db_name > backup.sql"}
{"instruction": "How to backup a mysql database?", "input": "mysqldump -u root -p --add-drop-table --routines --databases test > backup.sql", "output": "Dumping database test to backup.sql\nQuery OK, 0 rows affected (0.00 sec)"}
{"instruction": "What is innodb storage engine in mysql?", "input": "", "output": "Innodb is a storage engine for MySQL that uses a disk-based tablespace. It supports row-level locking, and transactions with row-level locking are faster than those with table-level locking."}
{"instruction": "How to delete all rows from warehouse table?", "input": "", "output": "DELETE FROM warehouse WHERE id IN (SELECT id FROM warehouse_items);"}
{"instruction": "Describe table foo in database abc?", "input": "", "output": "db.abc.foo\nTable \"abc.foo\"\nColumn | Type | Modifiers\n----+-----------------------------+-----------------------------------------------------\nid | integer | not null default nextval('abc.foo_id_seq'::regclass)"}
{"instruction": "Revoke select privilege on bar from testuser?", "input": "", "output": "revoke select on bar from testuser"}
{"instruction": "Insert data into snowflake table using primary key from another table?", "input": "Table: Student(name, age)\nPrimary Key: name", "output": "INSERT INTO student VALUES ('John', 25);\nINSERT INTO student VALUES ('Jane', 23);\nINSERT INTO student VALUES ('Peter', 22);\nINSERT INTO student VALUES ('Mary', 21);\nINSERT INTO student VALUES ('Mark', 20);\nINSERT INTO student VALUES ('Paul', 19);\nINSERT INTO student VALUES ('Michael', 18);\nINSERT INTO student VALUES ('David', 17);\nINSERT INTO student VALUES ('Robert', 16);\nINSERT INTO student VALUES ('James', 15);\nINSERT INTO student VALUES ('George', 14);\nINSERT INTO student VALUES ('Thomas', 13);\nINSERT INTO student VALUES ('Andrew', 12);\nINSERT INTO student VALUES ('William', 11);\nINSERT INTO student VALUES ('Charles', 10);\nINSERT INTO student VALUES ('Henry', 9);\nINSERT INTO student VALUES ('Edward', 8);\nINSERT INTO student VALUES ('Albert', 7);\nINSERT INTO student VALUES ('Richard', 6);\nINSERT INTO student VALUES ('Jonathan', 5);\nINSERT INTO student VALUES ('Adam', 4);\nINSERT INTO student VALUES ('Samuel', 3);\nINSERT INTO student VALUES ('Isaac', 2);\nINSERT INTO student VALUES ('Jacob', 1);"}
{"instruction": "Create a new view in snowflake that is based on warehouse_id, location_id and name?", "input": "", "output": "CREATE VIEW warehouse_location AS SELECT w.warehouse_id, l.location_id, w.name FROM warehouse w JOIN location l ON w.location_id = l.location_id;"}
{"instruction": "List all tables in a snowflake schema by creating a temporary table to store them in?", "input": "", "output": "CREATE TABLE temp_tables AS SELECT * FROM information_schema.TABLES;"}
{"instruction": "Alter table snowflake_table add constraint fk_snowflake_table foreign key (name) references users(user_id);", "input": "", "output": "alter table snowflake_table add constraint fk_snowflake_table foreign key (name) references users(user_id);"}
{"instruction": "Select * from db_name where name = 'snowflake';", "input": "", "output": "*"}
{"instruction": "What is the difference between create and alter table in mysql?", "input": "", "output": "create table - creates a new table.\nalter table - changes an existing table."}
{"instruction": "What are common mistakes when creating tables in mysql?", "input": "", "output": "- Using spaces instead of tabs to indent the table.\n- Not using a primary key.\n- Not adding indexes on columns that are used in WHERE clauses.\n- Not creating an index for every column.\n- Creating a foreign key with a different name than the referenced column.\n- Not specifying the default value for a column.\n- Not specifying the character set."}
{"instruction": "What are some of the most important considerations to keep in mind while designing a database schema?", "input": "", "output": "- Data Integrity\n- Performance"}
{"instruction": "Which commands can be used to create, alter, drop, rename, or modify databases in mysql?", "input": "", "output": "CREATE, ALTER, DROP, RENAME, MODIFY"}
{"instruction": "Describe how to use the show command in mysql to display information about databases, tables, columns, indexes, and other objects?", "input": "", "output": "show databases; \nshow tables; \nshow columns from table_name; \nshow indexes from table_name;"}
{"instruction": "Describe the structure of a mysql database.", "input": "", "output": "Database: products\nTable: product_info\nColumns: id, name, price, quantity\nRows: [1, iPhone X, 999, 10], [2, Samsung S9, 899, 20], [3, Apple Watch, 499, 30]"}
{"instruction": "Describe the structure of a mysql database.", "input": "", "output": "A mysql database consists of a number of tables. Each table has a name and contains rows and columns. A row is a set of values for each column in the table. A column is a set of values for each row in the table."}
{"instruction": "Describe the structure of a mysql database.", "input": "", "output": "Database: employees\nTable: employee_info\nColumns: id, first_name, last_name, email, phone_number\nRows: [1, John, Smith, john.smith@email.com, 555-555-5555], [2, Jane, Doe, jane.doe@email.com, 555-555-5556]"}
{"instruction": "List all tables that have a column with name warehouse_id and type number(8) .", "input": "", "output": "CREATE TABLE warehouse (\nwarehouse_id number(8) NOT NULL,\nPRIMARY KEY (warehouse_id));\nCREATE TABLE products (\nproduct_id number(8) NOT NULL,\nPRIMARY KEY (product_id),\nWAREHOUSE_ID number(8) NOT NULL);\nCREATE TABLE orders (\norder_id number(8) NOT NULL,\nPRIMARY KEY (order_id),\nWAREHOUSE_ID number(8) NOT NULL);\nCREATE TABLE customers (\ncustomer_id number(8) NOT NULL,\nPRIMARY KEY (customer_id),\nORDER_ID number(8) NOT NULL);\nCREATE TABLE warehouses (\nwarehouse_id number(8) NOT NULL,\nPRIMARY KEY (warehouse_id));"}
{"instruction": "What is the total amount of money earned by all warehouses in 2016?", "input": "", "output": "$1,000,000,000"}
{"instruction": "Find out which warehouse has the highest revenue for 20", "input": "", "output": "Warehouse #3"}
{"instruction": "Describe column col2 of table tbl1?", "input": "Table: tbl1 = [('a', 'b'), ('c', 'd')]", "output": "col2 is ['b', 'd']"}
{"instruction": "Describe column col2 of table tbl1?", "input": "Table: tbl1 = [('a', 'b'), ('c', 'd'), ('e', 'f')]", "output": "col2 is ['b', 'd']"}
{"instruction": "Select count(*) from warehouse where location='delhi'?", "input": "", "output": "3"}
{"instruction": "What is the difference between primary key and unique constraint?", "input": "", "output": "Primary key is a column or set of columns that uniquely identify each row in a table. Unique constraint is a constraint on a single column or a set of columns that ensures that the values in those columns are unique across all rows in a table."}
{"instruction": "How do i make a column nullable?", "input": "", "output": "class Column(BaseColumn):\n    __nullable__ = True"}
{"instruction": "How can i see all of my tables?", "input": "", "output": "SHOW TABLES;"}
{"instruction": "What are some common things that you need to know about sql server?", "input": "", "output": "- SQL Server is a relational database management system developed by Microsoft.\n- It is a server which can be accessed remotely using the Structured Query Language (SQL).\n- The first version of SQL Server was released in 1989 as \"Microsoft SQL Server 1.0 for MS-DOS\".\n- SQL Server supports different platforms like Windows, Linux and Unix.\n- SQL Server is used to store data in tables.\n- SQL Server provides various tools to manage databases.\n- SQL Server uses T-SQL language to create queries.\n- SQL Server has its own scripting language called Transact-SQL.\n- SQL Server supports different types of indexes like Clustered Indexes, Non-Clustered Indexes, Unique Indexes etc.\n- SQL Server supports different types of data types like Integer, Float, Decimal, Date, Time, Text etc.\n- SQL Server supports different types of constraints like Primary Key, Foreign Key, Check Constraints etc.\n- SQL Server supports different types of transactions like Read Committed, Repeatable Read, Serializable etc.\n- SQL Server supports different types of security like Users, Roles, Permissions etc.\n- SQL Server supports different types of backups like Full Backup, Differential Backup, Log Backup etc.\n- SQL Server supports different types of replication like Snapshot Replication, Merge Replication etc.\n- SQL Server supports different types of high availability like AlwaysOn Failover Cluster Instances, Availability Groups etc."}
{"instruction": "Is there any function like \"select * from table\"?", "input": "", "output": "Yes, there is. It's called \"select * from table\"."}
{"instruction": "Alter table sales add column qty number(8,0)?", "input": "", "output": "alter table sales add column qty number(8,0);"}
{"instruction": "Delete the view created in task 8?", "input": "", "output": "DELETE FROM `views` WHERE `name` = 'view_8';"}
{"instruction": "Drop the stored procedure created in task 9?", "input": "", "output": "DROP PROCEDURE IF EXISTS [dbo].[sp_test_drop_proc];"}
{"instruction": "Create a sequence with name myseq that starts from 1 and increments by 2 every time?", "input": "", "output": "class Solution(object):\n    def createSequence(self, n):\n        seq = [1]\n        while len(seq) < n:\n            seq.append(2*seq[-1])\n    return seq"}
{"instruction": "How to drop a sequence from an oracle database?", "input": "", "output": "class Solution(object):\n    def dropSequence(self, db, tableName, sequenceName):\n        cursor = db.cursor()\n        cursor.execute(\"\"\"DROP SEQUENCE IF EXISTS %s\"\"\" % (sequenceName))"}
{"instruction": "What are triggers in sql server?", "input": "", "output": "Triggers are special database objects that execute in response to some event on a table or view."}
{"instruction": "Give me an example of trigger in sql server?", "input": "", "output": "CREATE TRIGGER [dbo].[tr_update_user_status] ON [dbo].[UserStatus] AFTER UPDATE AS\nBEGIN\nEND"}
{"instruction": "Drop the table t1 from mysql?", "input": "", "output": "DROP TABLE t1;"}
{"instruction": "Rename column c2 to c3 in table t1 in mysql?", "input": "", "output": "ALTER TABLE t1 CHANGE c2 c3;"}
{"instruction": "Change type of column c2 in table t1 in mysql?", "input": "", "output": "ALTER TABLE t1 CHANGE c2 int(11) NOT NULL DEFAULT 0 AFTER c3;"}
{"instruction": "Insert data into mysql table using python?", "input": "", "output": "import mysql.connector as connector\nconn = connector.connect(user='root', password='123456', database='test')\ncur = conn.cursor()\ncur.execute(\"INSERT INTO table_name (column1, column2) VALUES (?, ?)\", [value1, value2])\nconn.commit()\nconn.close()"}
{"instruction": "What is the average of sales for warehouseid = 1 and warehousename = 'snowflake'?", "input": "", "output": "def average(sales):\n    total = 0\n    for warehouse in sales:\n        total += warehouse.sales\n    return total/len(sales)"}
{"instruction": "Show the top 10 records from the warehouseid_warehousename table where sales > 1000", "input": "", "output": "warehouseid, warehousename, sales\n1, Warehouse 1, 1002\n2, Warehouse 2, 998\n3, Warehouse 3, 997\n4, Warehouse 4, 996\n5, Warehouse 5, 995\n6, Warehouse 6, 994\n7, Warehouse 7, 993\n8, Warehouse 8, 992\n9, Warehouse 9, 991\n10, Warehouse 10, 990"}
{"instruction": "Get the current date time in sql format (yyyy-mm-dd hh:mi:ss)", "input": "", "output": "2018-08-15 10:00:00"}
{"instruction": "What is their average salary?", "input": "", "output": "$100,000"}
{"instruction": "Create a new table with same structure as employee, but use a different schema name?", "input": "", "output": "CREATE TABLE employee_new (\nid INT PRIMARY KEY,\nname VARCHAR(100),\nage INT,\ngender CHAR(1));"}
{"instruction": "Can i create a view that includes data from multiple tables?", "input": "", "output": "Yes, you can create a view that includes data from multiple tables."}
{"instruction": "Can i create a view that includes data from multiple tables?", "input": "", "output": "CREATE VIEW vw_test AS SELECT * FROM t1, t2;"}
{"instruction": "Can i create a view that includes data from multiple tables?", "input": "", "output": "CREATE VIEW vw_test AS SELECT * FROM t1 INNER JOIN t2 ON t1.id = t2.id;"}
{"instruction": "Create a view that lists employee names and their salaries?", "input": "", "output": "class Employee(object):\n    def __init__(self, name, salary):\n    self.name = name\n \nclass SalaryListView(object):\n    def get_data(self):\n    return [Employee('John', 1000), Employee('Jane', 2000)]"}
{"instruction": "Grant/revoke access to a particular schema in snowflake?", "input": "", "output": "grant create on schema1 to user1;\nrevoke create on schema1 from user2;"}
{"instruction": "Describe column col3 from table tbl1?", "input": "Table: tbl1\nColumn: col3", "output": "col3 is the column with values {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}"}
{"instruction": "Drop a column from a mysql table?", "input": "", "output": "DROP COLUMN `column_name` FROM table_name;"}
{"instruction": "Show schema for table1?", "input": "", "output": "CREATE TABLE table1 (\nid INTEGER PRIMARY KEY,\nname VARCHAR(100) NOT NULL,\nage INTEGER NOT NULL,\ncity_id INTEGER NOT NULL,\ncreated_at DATETIME NOT NULL,\nupdated_at DATETIME NOT NULL,\nUNIQUE INDEX name_index(name),\nINDEX city_id_index(city_id));"}
{"instruction": "Create user foo with password bar and grant select on table1 to the user?", "input": "", "output": "CREATE USER 'foo'@'localhost' IDENTIFIED BY 'bar';\nGRANT SELECT ON table1.* TO 'foo'@'localhost';"}
{"instruction": "Create table t2 (a int, b int) using column_property from table1?", "input": "Table1: a, b, c", "output": "t2 = Table(a=ColumnProperty(b), b=ColumnProperty(c))"}
{"instruction": "Backup table1 in database snowflake?", "input": "", "output": "CREATE TABLE table1 (id INT, name VARCHAR(20));\nINSERT INTO table1 VALUES (1,'John'), (2,'Mary');\nBACKUP DATABASE snowflake TO 'snowflake.bak';"}
{"instruction": "Create a view named vw_testview with columns id,name,age?", "input": "", "output": "class View(models.Model):\n    class Meta:\n    def __str__(self):\n    return self.name"}
{"instruction": "Create a trigger on table testtable after insert/update that runs procedure proc1()?", "input": "", "output": "CREATE TRIGGER testtable_trigger AFTER INSERT OR UPDATE ON testtable FOR EACH ROW EXECUTE PROCEDURE proc1();"}
{"instruction": "Insert data into a table called mytable in snowflake db?", "input": "", "output": "INSERT INTO mytable VALUES (1, 'one'), (2, 'two'), (3, 'three');"}
{"instruction": "Drop a table called mytable from snowflake db?", "input": "", "output": "DROP TABLE mytable;"}
{"instruction": "Create a new database with owner=user_1?", "input": "", "output": "CREATE DATABASE user_1;"}
{"instruction": "Create view vw_view in snowflake?", "input": "class View(object):\n    def __init__(self, *args, **kwargs):\n    self.name = kwargs.pop('name', None)\n    super().__init__(*args, **kwargs)\n    @property\n    def name(self):\n    return self._name", "output": "class vw_view(object):\n    def __init__(self, *args, **kwargs):\n    self.name = kwargs.pop('name', None)\n    super().__init__(*args, **kwargs)\n    @property\n    def name(self):\n    return self._name"}
{"instruction": "Grant select on testview to mike?", "input": "", "output": "GRANT SELECT ON testview TO mike;"}
{"instruction": "Show all grants for a table named \"test\"", "input": "", "output": "grants for table test:\nGRANT ALL PRIVILEGES ON test.* TO 'testuser'@'localhost' IDENTIFIED BY PASSWORD '*';\nGRANT SELECT, INSERT, UPDATE, DELETE ON test.* TO 'testuser'@'localhost';\nGRANT SELECT, INSERT, UPDATE, DELETE ON test.* TO 'testuser'@'127.0.0.1';"}
{"instruction": "List the privileges granted on my_view in snowflake?", "input": "Privileges granted on my_view in snowflake: SELECT, INSERT, UPDATE, DELETE", "output": "SELECT"}
{"instruction": "Describe tablespace tspitemp in snowflake?", "input": "", "output": "tsptemp is a tablespace that contains temporary tables. It has one datafile, tspitemp01.dbf. The size of the file is 1MB and it is located in /u01/app/oracle/oradata/snowflake/datafiles/tsptemp01.dbf."}
{"instruction": "Describe table in snowflake? 10.describe column in snowflake?", "input": "", "output": "Table is a collection of rows. Each row has a set of columns. Columns are the attributes of the table.\nColumns can be added, removed and reordered."}
{"instruction": "Show index from snowflake? 15.show constraint on snowflake?", "input": "", "output": "snowflake(15) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"}
{"instruction": "Connect to db2 from db1?", "input": "", "output": "db2=> connect to db1;\ndb2=> select * from table_name;"}
{"instruction": "Describe column \"id\" for table \"snowflake\"?", "input": "", "output": "id - Integer, PRIMARY KEY"}
{"instruction": "What are the privileges of user \"alice\"?", "input": "", "output": "alice can read and write to /home/alice."}
{"instruction": "Create new table with the same columns as \"snowflake_testtable\" but don't include any data from it?", "input": "", "output": "CREATE TABLE snowflake_testtable_copy (\nsnowflake_testtable_copy.id INT NOT NULL,\nsnowflake_testtable_copy.name VARCHAR(100) NOT NULL,\nsnowflake_testtable_copy.age INT NOT NULL,\nsnowflake_testtable_copy.gender CHAR(1) NOT NULL,\nPRIMARY KEY (id));"}
{"instruction": "Create view that is identical to vw_testview except only return id, name and age for records where age>30?", "input": "", "output": "def vw_testview(self):\n    return self.db.query('SELECT id, name, age FROM testtable WHERE age > 30')"}
{"instruction": "Create trigger on testtable in db1 so that if an update occurs then run this query: delete from table2 where id=triggered_id", "input": "", "output": "CREATE TRIGGER testtable_update BEFORE UPDATE ON testtable FOR EACH ROW BEGIN DELETE FROM table2 WHERE id=NEW.id; END;"}
{"instruction": "Create function f(x) = x+5", "input": "", "output": "def f(x):\n    return x + 5"}
{"instruction": "Insert into table3 values (f(1),'one'),(f(2),'two')", "input": "", "output": "Table3: one, two"}
{"instruction": "Create a view with name vw_emp that has columns (name, address)?", "input": "", "output": "class Employee(object):\n    def __init__(self, name, address):\n    self.name = name"}
{"instruction": "Alter view vw_emp add column salary type number(8) not null?", "input": "", "output": "alter view vw_emp add column salary type number(8) not null;"}
{"instruction": "Alter table abc add constraint ck1 check (abc > 0)?", "input": "", "output": "ALTER TABLE abc ADD CONSTRAINT ck1 CHECK (abc > 0);"}
{"instruction": "Grant a user to the newly created role?", "input": "Role: Administrator\nUser: John Smith", "output": "True"}
{"instruction": "Which databases do i have access to?", "input": "", "output": "- MySQL\n- PostgreSQL"}
{"instruction": "Explain insert into table with column datatype 'char(20)'?", "input": "", "output": "insert into table with column datatype 'char(20)';"}
{"instruction": "What are stored procedures and functions?", "input": "", "output": "A stored procedure is a collection of SQL statements that can be executed by the database server. A function is a set of SQL statements that are defined within the scope of a database table and can be used to compute values for columns in that table."}
{"instruction": "How to drop a procedure or function?", "input": "", "output": "DROP PROCEDURE IF EXISTS [procedure_name];\nDROP FUNCTION IF EXISTS [function_name];"}
{"instruction": "Show all columns in table tbl1 in snowflake?", "input": "", "output": "snowflake=> \\d tbl1\nTable \"public.tbl1\"\nColumn | Type | Modifiers\n-----+-----------------------+-----------\nid | integer | not null default nextval('tbl1_id_seq'::regclass)\nname | character varying(255) |\nage | integer |"}
{"instruction": "Create a new role called 'user' with no permissions?", "input": "", "output": "CREATE ROLE user WITH NO PERMISSIONS;"}
{"instruction": "Grant select on dbo.tbl1 to public?", "input": "", "output": "GRANT SELECT ON dbo.tbl1 TO PUBLIC"}
{"instruction": "List the roles and their memberships?", "input": "", "output": "Role1: {Alice, Bob}\nRole2: {Bob, Charlie}\nRole3: {Charlie, David}\nRole4: {David, Eve}\nRole5: {Eve, Fred}"}
{"instruction": "Drop view named vw_employees", "input": "", "output": "DROP VIEW vw_employees;"}
{"instruction": "Grant update on department_id to role hr", "input": "Table: department_role", "output": "UPDATE department_role SET department_id = 'hr' WHERE role = 'manager';"}
{"instruction": "Grant update on department_id to role hr", "input": "Table: employee_role", "output": "UPDATE employee_role SET department_id = 'hr' WHERE role = 'employee';"}
{"instruction": "Drop schema myschema in snowflake?", "input": "", "output": "DROP SCHEMA myschema;"}
{"instruction": "Restore table from backup into another name?", "input": "", "output": "CREATE TABLE `restore_table` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;\nINSERT INTO `restore_table` VALUES (NULL),('John'),('Mary'),('Jane');\nSELECT * FROM `restore_table` ORDER BY id DESC LIMIT 0,1;"}
{"instruction": "How can i get the data from a view?", "input": "", "output": "class Solution(object):\n   def getDataFromView(self, view):\n   return self.get_data()"}
{"instruction": "Connect to db2 using sqlldr?", "input": "", "output": "sqlldr db2inst1 -d sample -i db2inst1.sql"}
{"instruction": "List all views that i have access to?", "input": "", "output": "- view_1\n- view_2\n- view_3\n- view_4\n- view_5\n- view_6\n- view_7\n- view_8\n- view_9\n- view_10"}
{"instruction": "Drop the role named \"snowflakedemo\"?", "input": "Role name: snowflakedemo", "output": "true"}
{"instruction": "Grant select on schema_name.* to someuser?", "input": "", "output": "GRANT SELECT ON SCHEMA_NAME.* TO 'someuser'@'localhost';"}
{"instruction": "Drop database from test_db?", "input": "", "output": "DROP DATABASE test_db;"}
{"instruction": "List all indexes on a table in test_db?", "input": "", "output": "CREATE TABLE test_db.test_table (id INT, name VARCHAR(20));\nINSERT INTO test_db.test_table VALUES (1,'John');\nINSERT INTO test_db.test_table VALUES (2,'Mary');\nINSERT INTO test_db.test_table VALUES (3,'Jane');\nSELECT * FROM test_db.test_table;"}
{"instruction": "Create an index on warehouseid column for warehouse table in test_db?", "input": "", "output": "CREATE INDEX warehouseid_index ON warehouse(warehouseid);"}
{"instruction": "Create a view in snowflake that shows only those employees who have salary greater than 100,000 and name is not null?", "input": "", "output": "class Solution(object):\n    def getEmployeesWithSalaryGreaterThan100000AndNameNotNull(self, name):\n        employees = self.get_employees()\n        if len(employees) == 0:\n        return []\n        for employee in employees:\n        if (employee.salary > 100000 and employee.name is not None):\n        return [employee]"}
{"instruction": "How do you drop a database in snowflake?", "input": "", "output": "DROP DATABASE IF EXISTS [Database Name];"}
{"instruction": "How do you add users to db in snowflake?", "input": "", "output": "db.addUser('user1', 'password')\ndb.addUser('user2', 'password')\ndb.addUser('user3', 'password')"}
{"instruction": "Drop table named emp_dept", "input": "", "output": "DROP TABLE emp_dept;"}
{"instruction": "Alter table abc set storage_parameter=\u20191\u2032?", "input": "", "output": "ALTER TABLE abc SET STORAGE_PARAMETER = '1'"}
{"instruction": "How do i list views in a database?", "input": "", "output": "class Solution(object):\n    def listViews(self, db):\n        cursor = db.cursor()\n        cursor.execute(\"\"\"SELECT * FROM view_table ORDER BY name ASC\"\"\" )\n        for row in cursor:\n           print row"}
{"instruction": "How do i revoke privileges from a user in snowflake?", "input": "", "output": "Revoke privileges from a user in snowflake."}
{"instruction": "What tables are related to snowflake schema?", "input": "", "output": "Snowflake schema is a type of star schema. It is also known as snowflake schema, star-denormalized schema, or star schema with denormalized branches."}
{"instruction": "What indexes do i have for this table?", "input": "Table: [1, 2, 3, 4, 5]", "output": "0, 1, 2, 3, 4"}
{"instruction": "What indexes do i have for this table?", "input": "Table: [0, 1, 2, 3, 4, 5]", "output": "0, 1, 2, 3, 4, 5"}
{"instruction": "Explain plan for query with given sql statement?", "input": "SQL Statement: SELECT * FROM users WHERE age > 18 AND age < 65;", "output": "The query will return all the users who are between 18 and 65 years old."}
{"instruction": "Alter table dept add constraint fk_dept_dept foreign key (deptno) references dept;", "input": "", "output": "alter table dept add constraint fk_dept_dept foreign key (deptno) references dept;"}
{"instruction": "Grant insert on a table in snowflake to user 'testuser'?", "input": "", "output": "GRANT INSERT ON TABLE testuser.snowflake TO 'testuser'@'localhost';"}
{"instruction": "Add an existing user to a group in snowflake?", "input": "", "output": "snowflake> add-user -u jsmith -g admins"}
{"instruction": "Add an existing user to a group in snowflake?", "input": "", "output": "snowflake> add-user -u [username] -g [groupname]"}
{"instruction": "Add an existing user to a group in snowflake?", "input": "", "output": "snowflake> add-user -u jsmith -g developers"}
{"instruction": "Show tables from database abc in mysql?", "input": "", "output": "show tables;"}
{"instruction": "Show tables from database abc in mysql?", "input": "", "output": "+----------------+ | Tables_in_abc | +----------------+ | abc_table1 | | abc_table2 | | abc_table3 | +----------------+"}
{"instruction": "Show tables from database abc in mysql?", "input": "", "output": "+----------------+ | Tables_in_abc | +----------------+ | abc_table1 | | abc_table2 | +----------------+"}
{"instruction": "How to connect to a specific database in mysql?", "input": "", "output": "use [database name];"}
{"instruction": "How to connect to a specific database in mysql?", "input": "", "output": "mysql> use mydb;\nQuery OK, 0 rows affected (0.00 sec)"}
{"instruction": "How to connect to a specific database in mysql?", "input": "", "output": "mysql> use test;\nQuery OK, 0 rows affected (0.00 sec)"}
